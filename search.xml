<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>分布式架构-dubbo</title>
      <link href="/2020/02/27/%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84-dubbo/"/>
      <url>/2020/02/27/%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84-dubbo/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="分布式架构-dubbo《一》"><a href="#分布式架构-dubbo《一》" class="headerlink" title="分布式架构-dubbo《一》"></a>分布式架构-dubbo《一》</h1><h2 id="1-分布式思维"><a href="#1-分布式思维" class="headerlink" title="1.分布式思维"></a>1.分布式思维</h2><p><strong>集群与分布式</strong></p><p><img alt data-src="https://cdn.jsdelivr.net/gh/longshilee/cdn/img/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20200227184241.png" class="lozad"></p><p>上图是由单机到集群、分布式的演变过程。</p><p><strong>最早的javaweb雏形</strong></p><p><img alt="https://cdn.jsdelivr.net/gh/longshilee/cdn/img/微信图片_20200227184143.png" data-src="https://cdn.jsdelivr.net/gh/longshilee/cdn/img/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20200227184143.png" class="lozad"></p><p>​    <strong>特征：</strong>tomcat + servlet + jsp + mysql。一个war包打天下<br>​    <strong>项目结构：</strong>ssh/ssm三层结构。</p><p><strong>javaweb的集群发展</strong></p><p><img alt="https://cdn.jsdelivr.net/gh/longshilee/cdn/img/微信图片_20200227184207.png" data-src="https://cdn.jsdelivr.net/gh/longshilee/cdn/img/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20200227184207.png" class="lozad"></p><p>​    <strong>特征：</strong>硬件机器的横向复制，对整个项目结构无影响。</p><p><strong>javaweb的分布式发展</strong></p><p><img alt="https://cdn.jsdelivr.net/gh/longshilee/cdn/img/微信图片_20200227184214.png" data-src="https://cdn.jsdelivr.net/gh/longshilee/cdn/img/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20200227184214.png" class="lozad"></p><p>​    <strong>特征：</strong>将Service层单独分离出去，成为一个单独的项目jar。单独运行。Web服务器通过rpc框架，对分离出去的service进行调用。</p><p><strong>javaweb的微服务发展</strong></p><p><img alt data-src="https://cdn.jsdelivr.net/gh/longshilee/cdn/img/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20200227184219.png" class="lozad"></p><p>​    <strong>特征：</strong>从业务角度，细分业务为微服务，每一个微服务是一个完整的服务（从http请求到返回）。<br>​    在微服务内部，将需要对外提供的接口，包装成rpc接口，对外部开放。</p><h2 id="2-RPC介绍及场景"><a href="#2-RPC介绍及场景" class="headerlink" title="2. RPC介绍及场景"></a>2. RPC介绍及场景</h2><p><strong>RPC远程过程调用(Remote Procedure Call)</strong></p><p>调用远程计算机上的服务，就像调用本地服务一样。</p><p><img alt data-src="https://cdn.jsdelivr.net/gh/longshilee/cdn/img/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20200227184235.png" class="lozad"></p><p><strong>RPC实现的切入口</strong></p><p>​    我们知道从本质上讲，某个JVM内的对象方法，是无法在该JVM外部被调用的。</p><p>如下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">OrderService orderService = (OrderService) ctx.getBean(<span class="string">"orderService"</span>);</span><br><span class="line">OrderEntiry entiry = orderService.getDetail(<span class="string">"1"</span>);</span><br></pre></td></tr></table></figure><p>orderService.getDetail(“1”)的这一句调用，是无法脱离本地 jvm 环境被调用的。因为外部在调用的时候，没办法得到orderService对象的，本地对orderService也不会认识。</p><p>但是，好在java中除了对象方法的调用之外，还有通过反射方式的调用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Method method = target.getClass().getMethod(methodName, argTypes);</span><br><span class="line"><span class="keyword">return</span> method.invoke(target,args);</span><br></pre></td></tr></table></figure><p>所以对于本地，只要外部传入了反射需要的目标对象orderService, 方法名称getDetail，和参数值“1”，就能通过反射调用并返回。所以对于外部来说，可以将上述的调用改成如下方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String,String&gt; info = <span class="keyword">new</span> HashMap();</span><br><span class="line">info.put(<span class="string">"target"</span>,<span class="string">"orderService"</span>);</span><br><span class="line">info.put(<span class="string">"methodName"</span>,<span class="string">"getDetail"</span>);</span><br><span class="line">info.put(<span class="string">"arg"</span>,<span class="string">"1"</span>);</span><br><span class="line"><span class="comment">//反射调用</span></span><br><span class="line">Object result = InvokeUtils.call(info,ctx)</span><br></pre></td></tr></table></figure><p>对于本地来说，只要告诉我反射需要的信息，target/method/arg,就能调用本地的任何对象方法。</p><p>现在只要通过网络传输反射信息，就能通过网络的方式调用不同JVM的方法。网络通信的方法很多，如http/rmi/webservice等，选任何一种方式进行通信即可。</p><h2 id="dubbo简介"><a href="#dubbo简介" class="headerlink" title="dubbo简介"></a>dubbo简介</h2><p><strong>dubbo的使命</strong></p><p>上面已经说明了RPC的调用过程，即实现方式，其实在实际工作中，服务节点的RPC调用错综复杂，会变成如下所示的网状调用：</p><p><img alt data-src="https://cdn.jsdelivr.net/gh/longshilee/cdn/img/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20200227184225.png" class="lozad"></p><p>所以，我们除了关心RPC的过程调用之外，还需要考虑：</p><ol><li><p>服务方是集群时，如何挑选一台服务器来响应客户端？</p></li><li><p>因网络抖动引起的调用失败，如何重试来弥补？</p></li><li><p>服务方机器的动态增减，如何能够让客户端及时了解并做出调整？</p></li><li><p>………….</p><p>Dubbo的使命，即解决上述围绕RPC过程的存在问题。</p></li></ol><p><strong>高并发RPC解决方案</strong></p><p>基于TCP的RPC实现，阿里巴巴公司开源的一个高性能优秀的服务框架，使得应用可通过高性能的RPC实现服务的输出和输入功能，可以和Spring框架无缝集成。</p><p><img alt data-src="https://cdn.jsdelivr.net/gh/longshilee/cdn/img/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20200227184230.png" class="lozad"></p><p>Provider: 暴露服务的服务提供方。<br>Consumer: 调用远程服务的服务消费方。<br>Registry: 服务注册与发现的注册中心。<br>Monitor: 统计服务的调用次调和调用时间的监控中心。<br>Container: 服务运行容器。</p>]]></content>
      
      
      <categories>
          
          <category> dubbo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 框架 </tag>
            
            <tag> dubbo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RocketMQ</title>
      <link href="/2019/10/30/RocketMQ/"/>
      <url>/2019/10/30/RocketMQ/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p>​    消息队列 RocketMQ 是阿里巴巴集团基于高可用分布式集群技术，自主研发的云正式商用的专业消息中间件，既可为分布式应用系统提供异步解耦 和削峰填谷的能力，同时也具备互联网应用所需的海量消息堆积、高吞吐、可靠重试等特性，是阿里巴巴双 11 使用的核心产品。 </p><p>RocketMQ 的设计基于主题的发布与订阅模式，其核心功能包括消息发送、消息存储(Broker)、消息消费，整体设计追求简单与性能第一。 </p><ol><li>NameServer 设计及其简单，RocketMQ 摈弃了业界常用的 Zookeeper 充当消息管理的“注册中心”，而是使用自主研发的 NameServer 来实现 各种元数据的管理（Topic 路由信息等）</li><li>高效的 I/O 存储，RocketMQ 追求消息发送的高吞吐量，RocketMQ 的消息存储设计成文件组的概念，组内单个文件固定大小，引入了内存映射 机制，所有主题的消息存储基于顺序读写，极大提高消息写性能，同时为了兼顾消息消费与消息查找，引入消息消费队列文件与索引文件 </li><li>容忍存在设计缺陷，适当将某些工作下放给 RocketMQ 的使用者，比如消息只消费一次，这样极大的简化了消息中间件的内核，使得 RocketMQ 的实现发送变得非常简单与高效。 </li></ol></blockquote><p><strong>核心概念</strong></p><p><img alt="image-20191030152719983" data-src="C:%5CUsers%5Cadmin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20191030152719983.png" class="lozad"></p><blockquote><p><strong>NameServer</strong></p><p>​    NameServer 是整个RocketMQ的“大脑”， 它是RocketMQ的服务注册中心，所以RocketMQ需要先启动NameServer再启动Rocket中的Broker。</p><p>​    Broker在启动时向所有NameServer注册（服务器地址信息等），生产者在发送消息之前先从NameServer获取Broker服务器地址列表（消费者也是一样），然后根据负载均衡算法从列表中选择一台服务器进行消息发送。</p><p>​    NameServer与每一台Broker服务保持长连接，并间隔<strong>30s</strong>检查Broker是否存活，如果检测到Broker宕机，则从路由注册表中将其移除。这样就可以实现RocketMQ的高可用。</p><p><strong>主题</strong></p><p>​    Topic, 消息主题，以及消息类型，生产者向其发送消息。消费者负责从Topic接收并消费消息。</p><p><strong>生产者</strong></p><p>​    也称为消息发布者，负责生产并发送消息至Topic。</p><p><strong>消费者</strong></p><p>​    也称为消息订阅者，负责从Topic接收并消费消息。</p><p><strong>消息</strong></p><p>​    生产者或者消费者进行消息发送或消费的主题，对于RocketMQ来说，消息就是字节数组。</p></blockquote><blockquote><p><strong>整体流程：</strong></p><ol><li>NameServer先启动</li><li>Broker启动时向NameServer注册</li><li>生产者发送某个主题的消息之前先从NameServer获取Broker服务器地址列表（可能是集群），然后根据负载均衡算法从列表中选择一台Broker进行消息发送。</li><li>NameServer与每台Broker服务器保持长连接，并间隔<strong>30s</strong>检测Broker是否存活，如果检测到Broker宕机（使用心跳机制，如果检测超过<strong>120s</strong>）,则从路由注册表中将其移除。</li><li>消费者在订阅某个主题的消息之前从NameServer获取Broker服务器地址列表（可能是集群），但是消费者选择从Broker中订阅消息，订阅规则由Broker配置决定。</li></ol></blockquote><p><strong>RocketMQ的设计理念和目标</strong></p><blockquote><p><strong>设计理念：</strong></p><p>​    基于主题的发布与订阅，其核心功能，消息发送、消息存储和消息消费。整体设计追求简单和性能。</p><p>​    NameServer性能对比Zookeeper有极大的提升</p><p>​    高效的IO存储机制，基于文件顺序读写，内存映射机制</p><p>​    容忍设计缺陷，比如消息只消费一次。Rocket自身不保证，从而简化Rocket的内核使得Rocket简单与高效，这个问题交个消费者去实现（幂等）。</p><p><strong>设计目标：</strong></p><p>​    <strong>架构模式：</strong>发布订阅模式，主要组件：消息发送者、消息服务器（消息存储）、消息消费、路由发现</p><p>​    <strong>顺序消息:</strong>RocketMQ可以严格保证消息有序</p><p>​    <strong>消息过滤：</strong>消息消费时，消费者可以对同一主题下的消息按照规则只消费自己感兴趣的消息，可以支持在服务端与消费端的消息过滤机制。</p><p>​    <strong>消息存储：</strong>一般MQ核心就是消息的存储，对存储一般来说两个维度：消息堆积能力和消息存储性能。RocketMQ追求消息存储的高性能，引入内存映射机制，所有的主题消息顺序存储在同一个文件中。同时为了防止无限堆积，引入消息文件过期机制和文件存储空间报警机制。</p><p>​    <strong>消息高可用：</strong></p><ol><li>Rocket关机、断电等情况下，Rocket可以确保不丢失消息（同步刷盘机制不丢失，异步刷盘会丢失少量）。</li><li>另外如果Rocket服务器因为CPU、 、主板、磁盘等关键设备损坏导致无法开机。属于单点故障，该节点上的消息全部丢失，如果开启了异步复制机制，Rocket可以确保丢失很少量消息。</li><li>如果引入双写机制，这样基本上可以满足消息可靠性要求极高的场景</li></ol><p>​    <strong>消息消费低延迟：</strong>RocketMQ在消息不发生消息堆积时，以长轮询模式实现准实时的消息推送模式。</p><p>​    <strong>确保消息必须被消费一次：</strong>消息确认机制（ACK）来确保消息至少被消费一次，一般ACK机制只能做到消息只被消费一次，有重复消费的可能。</p><p>​    <strong>消息回溯：</strong>已经消费完的消息，可以根据业务要求重新消费消息。</p><p>​    <strong>消息堆积：</strong>消息中间件的主要功能是异步解耦，还有个重要功能是挡住前端的数据洪峰，保证后端系统的稳定性，这就要求消息中间件具有一定的消息堆积能力，RocketMQ采用磁盘文件存储，所以堆积能力比较强，同时提供文件过期删除机制。</p><p>​    <strong>定时消息：</strong>定时消息，定时消息是指消息发送到Rocket Broker上之后，不被消费者立即消费，要等待一定的时间才能进行消费，apache的版本目前只支持等待指定的时间才能被消费，不支持任意精度的定时消息消费。（ps: 阿里云版本RocketMQ提供这样的功能，意思是收费才能使用）</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> RocketMq </tag>
            
            <tag> 消息中间件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot框架</title>
      <link href="/2019/10/18/SpringBoot%E6%A1%86%E6%9E%B6/"/>
      <url>/2019/10/18/SpringBoot%E6%A1%86%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="解决传统SSM的问题"><a href="#解决传统SSM的问题" class="headerlink" title="解决传统SSM的问题"></a>解决传统SSM的问题</h2><ul><li>依赖太多了, 且存在版本问题</li><li>配置太多了且每次都一样, 大部分工程, 配置每次都是一样的, 从一个地方拷贝到另外一个地方. 且Spring发展10多年, 各种配置版本太多, 对于很多程序员来说, 分不清哪个是有效, 哪个无效.</li><li>部署太麻烦. 需要tomcat部署, 项目结构也需要照着Java EE的目录结构来写.<h2 id="SpringBoot特点"><a href="#SpringBoot特点" class="headerlink" title="SpringBoot特点"></a>SpringBoot特点</h2></li><li>创建独立的Spring应用程序</li><li>嵌入的Tomcat，无需部署WAR文件</li><li>简化Maven配置</li><li>自动配置Spring</li><li>提供生产就绪型功能，如指标，健康检查和外部配置</li><li>绝对没有代码生成和对XML没有要求配置</li><li>几乎可以全注解方式<h2 id="SpringBoot的功能"><a href="#SpringBoot的功能" class="headerlink" title="SpringBoot的功能"></a>SpringBoot的功能</h2></li><li>自动配置(auto-configuration)<blockquote><p>一项简化配置的功能，比如在classpath中发现有spring security的jar包，则自动创建相关的bean等</p></blockquote></li><li>starters(简化依赖)<blockquote><p>这个比较关键，方便spring去集成各类组件，比如redis、mongodb等等。</p></blockquote><h2 id="SpringBoot项目搭建"><a href="#SpringBoot项目搭建" class="headerlink" title="SpringBoot项目搭建"></a>SpringBoot项目搭建</h2><blockquote><p>说明：开发工具使用<strong>IDEA</strong>，版本为<strong>2.1.3</strong></p></blockquote></li></ul><p>在<strong>IDEA</strong>中新建<strong>module</strong>,选择<strong>Spring Initializr</strong>按next一步一步创建即可;或者直接创建普通maven项目</p><p>修改<strong>pom.xml</strong>文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;parent&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.1.3.RELEASE&lt;/version&gt;</span><br><span class="line">    &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class="line">&lt;/parent&gt;</span><br></pre></td></tr></table></figure><p>继承spring-boot-starter-parent项目来获取合适的默认设置。</p><p>注意：只需要在该依赖上指定Spring Boot版本。如果导入其他的starters，可以放心的省略版本号。</p><p><strong>聚合项目pom.xml修改：</strong></p><p>不是每个人都喜欢继承spring-boot-starter-parent POM。你可能需要使用公司标准parent，或你可能倾向于显式声明所有Maven配置。<br>如果你不使用spring-boot-starter-parent，通过使用一个scope=import的依赖，你仍能获取到依赖管理的好处：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencyManagement&gt;</span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-dependencies&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;2.1.3.RELEASE&lt;/version&gt;</span><br><span class="line">            &lt;type&gt;pom&lt;/type&gt;</span><br><span class="line">            &lt;scope&gt;import&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line">&lt;/dependencyManagement&gt;</span><br></pre></td></tr></table></figure><p>指定JDK版本需要在pom.xml添加:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;properties&gt;</span><br><span class="line">    &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span><br><span class="line">    &lt;maven.compiler.source&gt;1.8&lt;/maven.compiler.source&gt;</span><br><span class="line">    &lt;maven.compiler.target&gt;1.8&lt;/maven.compiler.target&gt;</span><br><span class="line">&lt;/properties&gt;</span><br></pre></td></tr></table></figure><p>或者简单的添加：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;properties&gt;</span><br><span class="line">    &lt;java.version&gt;1.8&lt;/java.version&gt;</span><br><span class="line">&lt;/properties&gt;</span><br></pre></td></tr></table></figure><p>SpringBoot需要Web支持，所以需要导入web组件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><p>现在可以写一个简单SpringBoot程序了，我们知道maven会默认编译src/main/java下的源码；</p><p>所以我们在该目录下新建java文件：com.ccsu.App</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">package com.ccsu;</span><br><span class="line">import org.springframework.boot.*;</span><br><span class="line">import org.springframework.boot.autoconfigure.*;</span><br><span class="line">import org.springframework.stereotype.*;</span><br><span class="line">import org.springframework.web.bind.annotation.*;</span><br><span class="line">@RestController</span><br><span class="line">@EnableAutoConfiguration</span><br><span class="line">public class App &#123;</span><br><span class="line">    @RequestMapping(&quot;/&quot;)</span><br><span class="line">    String home() &#123;</span><br><span class="line">        return &quot;Hello World!&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line">        SpringApplication.run(App.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行main方法，使用浏览器打开<a href="http://localhost:8080，即可看到**Hello" target="_blank" rel="noopener">http://localhost:8080，即可看到**Hello</a> World!**字样。</p><p>上述SpringBoot特点已说明内部嵌入Tomcat，所以该处默认端口为8080</p><p><strong>注解说明：</strong></p><blockquote><p>@RestController。这被称为一个构造型（stereotype）注解。它为阅读代码的人们提供建议。对于Spring，该类扮演了一个特殊角色。在本示例中，我们的类是一个web @Controller，所以当处理进来的web请求时，Spring会询问它。</p></blockquote><blockquote><p>@RequestMapping。注解提供路由信息。它告诉Spring任何来自”/“路径的HTTP请求都应该被映射到home方法。@RestController注解告诉Spring以字符串的形式渲染结果，并直接返回给调用者。</p></blockquote><blockquote><p>@EnableAutoConfiguration。这个注解告诉Spring Boot根据添加的jar依赖猜测你想如何配置Spring。由于spring-boot-starter-web添加了Tomcat和Spring MVC，所以auto-configuration将假定你正在开发一个web应用并相应地对Spring进行设置。该注解会自动扫描App.java所在的所有文件。</p></blockquote><blockquote><p>main方法。这只是一个标准的方法，它遵循Java对于一个应用程序入口点的约定。我们的main方法通过调用run，将业务委托给了Spring Boot的SpringApplication类。SpringApplication将引导我们的应用，启动Spring，相应地启动被自动配置的Tomcat web服务器。我们需要将App.class作为参数传递给run方法来告诉SpringApplication谁是主要的Spring组件。</p></blockquote><p><strong>注意事项：</strong></p><p><strong>定位main应用类</strong></p><blockquote><p>通常建议你将main应用类放在位于其他类上面的根包（root package）中。通常使用@EnableAutoConfiguration注解你的main类，并且暗地里为某些项定义了一个基础“search package”。例如，如果你正在编写一个JPA应用，被@EnableAutoConfiguration注解的类所在包将被用来搜索@Entity项。<br>使用根包允许你使用@ComponentScan注解而不需要定义一个basePackage属性。如果main类位于根包中，你也可以使用@SpringBootApplication注解。</p></blockquote><p>比较典型的项目结构</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">cn</span><br><span class="line"> +- ccsu</span><br><span class="line">     +- myproject</span><br><span class="line">         +- Application.java</span><br><span class="line">         |</span><br><span class="line">         +- domain</span><br><span class="line">         |   +- Customer.java</span><br><span class="line">         |   +- CustomerRepository.java</span><br><span class="line">         |</span><br><span class="line">         +- service</span><br><span class="line">         |   +- CustomerService.java</span><br><span class="line">         |</span><br><span class="line">         +- web</span><br><span class="line">             +- CustomerController.java</span><br></pre></td></tr></table></figure><p><strong>实现简单注册登录功能</strong></p><ol><li>使用数据库mysql,创建用户表：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `user` (</span><br><span class="line">`id`  int NOT NULL AUTO_INCREMENT ,</span><br><span class="line">`passwd`  varchar(255) NULL ,</span><br><span class="line">`username`  varchar(255) NULL ,</span><br><span class="line">PRIMARY KEY (`id`)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>2.集成mybatis。修改pom.xml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--mybatis整合，需要mybatis-spring-boot-starter， 和mysql连接，即：mysql-connector-java--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.3.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!--JDBC导入，此处用mysql--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>3.配置mysql数据源</p><p>在resources目录，新建application.properties或application.yml文件（application.properties或application.yml是SpringBoot默认支持的两种配置文件，application是默认约定的文件名）。</p><p>配置数据源，需要在该配置文件中添加：</p><p>application.properties</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#mysql数据源配置</span><br><span class="line">spring.datasource.driverClassName=com.mysql.jdbc.Driver</span><br><span class="line">spring.datasource.url=jdbc:mysql://localhost:3306/spingboot?serverTimezone=GMT%2B8</span><br><span class="line">spring.datasource.username=root</span><br><span class="line">spring.datasource.password=password</span><br><span class="line"></span><br><span class="line">#配置需要扫描加载的mapper文件，此处即：mapping文件夹下的xml文件</span><br><span class="line">mybatis.mapperLocations=classpath:mapping/*.xml</span><br></pre></td></tr></table></figure><p>4.使用mybatis逆向工程自动生成相关文件。</p><p>自动生成代码需要相关插件，此处使用<strong>mybatis-generator-maven-plugin</strong>，比较好用的代码生成工具还有：<strong>rapid-generator</strong>等。</p><p>修改pom.xml引入插件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;plugin&gt;</span><br><span class="line">    &lt;groupId&gt;org.mybatis.generator&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mybatis-generator-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">    &lt;configuration&gt;</span><br><span class="line">        &lt;overwrite&gt;true&lt;/overwrite&gt;</span><br><span class="line">    &lt;/configuration&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure><p>创建项目目录结构，以便指定生成文件存放目录,我的项目项目结构为:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">com</span><br><span class="line"> +- ccsu</span><br><span class="line">     +- App.java</span><br><span class="line">     |</span><br><span class="line">     +- controller</span><br><span class="line">     |   +- UserController.java</span><br><span class="line">     |</span><br><span class="line">     +- service</span><br><span class="line">     |   +-impl</span><br><span class="line">     |      +- IBaseServiceImpl.java</span><br><span class="line">     |      +- UserServiceImpl.java</span><br><span class="line">     |   +-IBaseService.java</span><br><span class="line">     |   +- UserService.java</span><br><span class="line">     |</span><br><span class="line">     +- dao</span><br><span class="line">     |    +- IBaseMapper.java</span><br><span class="line">     |    +- UserMapper.java</span><br><span class="line">     |</span><br><span class="line">     +- model</span><br><span class="line">     |  +- User.java</span><br></pre></td></tr></table></figure><p>同时需要在<strong>resources</strong>目录下创建<strong>mapping</strong>文件夹，以便存放生成相关的<strong>mapper.xml</strong>文件</p><p>准备自动生成代码的配置文件，mybatis-generator-maven-plugin插件使用名为<strong>generatorConfig.xml</strong>的配置文件。</p><p>generatorConfig.xml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE generatorConfiguration</span><br><span class="line">        PUBLIC &quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span><br><span class="line">        &quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;&gt;</span><br><span class="line">&lt;generatorConfiguration&gt;</span><br><span class="line">    &lt;!-- 数据库驱动:选择你的本地硬盘上面的数据库驱动包--&gt;</span><br><span class="line">    &lt;classPathEntry  location=&quot;D:\JavaSpace\software\maven\repo\mysql\mysql-connector-java\5.1.34\mysql-connector-java-5.1.34.jar&quot;/&gt;</span><br><span class="line">    &lt;context id=&quot;DB2Tables&quot;  targetRuntime=&quot;MyBatis3&quot;&gt;</span><br><span class="line">        &lt;commentGenerator&gt;</span><br><span class="line">            &lt;property name=&quot;suppressDate&quot; value=&quot;true&quot;/&gt;</span><br><span class="line">            &lt;!-- 是否去除自动生成的注释 true：是 ： false:否 --&gt;</span><br><span class="line">            &lt;property name=&quot;suppressAllComments&quot; value=&quot;true&quot;/&gt;</span><br><span class="line">        &lt;/commentGenerator&gt;</span><br><span class="line">        &lt;!--数据库链接URL，用户名、密码 --&gt;</span><br><span class="line">        &lt;jdbcConnection driverClass=&quot;com.mysql.jdbc.Driver&quot; connectionURL=&quot;jdbc:mysql://127.0.0.1:3306/spingboot&quot; userId=&quot;root&quot; password=&quot;&quot;&gt;</span><br><span class="line">        &lt;/jdbcConnection&gt;</span><br><span class="line">        &lt;javaTypeResolver&gt;</span><br><span class="line">            &lt;property name=&quot;forceBigDecimals&quot; value=&quot;false&quot;/&gt;</span><br><span class="line">        &lt;/javaTypeResolver&gt;</span><br><span class="line">        &lt;!-- 生成模型的包名和位置--&gt;</span><br><span class="line">        &lt;javaModelGenerator targetPackage=&quot;com.ccsu.model&quot; targetProject=&quot;src/main/java&quot;&gt;</span><br><span class="line">            &lt;property name=&quot;enableSubPackages&quot; value=&quot;true&quot;/&gt;</span><br><span class="line">            &lt;property name=&quot;trimStrings&quot; value=&quot;true&quot;/&gt;</span><br><span class="line">        &lt;/javaModelGenerator&gt;</span><br><span class="line">        &lt;!-- 生成映射文件的包名和位置--&gt;</span><br><span class="line">        &lt;sqlMapGenerator targetPackage=&quot;mapping&quot; targetProject=&quot;src/main/resources&quot;&gt;</span><br><span class="line">            &lt;property name=&quot;enableSubPackages&quot; value=&quot;true&quot;/&gt;</span><br><span class="line">        &lt;/sqlMapGenerator&gt;</span><br><span class="line">        &lt;!-- 生成DAO的包名和位置--&gt;</span><br><span class="line">        &lt;javaClientGenerator type=&quot;XMLMAPPER&quot; targetPackage=&quot;com.ccsu.dao&quot; targetProject=&quot;src/main/java&quot;&gt;</span><br><span class="line">            &lt;property name=&quot;enableSubPackages&quot; value=&quot;true&quot;/&gt;</span><br><span class="line">        &lt;/javaClientGenerator&gt;</span><br><span class="line">        &lt;!-- 要生成的表 tableName是数据库中的表名或视图名 domainObjectName是实体类名--&gt;</span><br><span class="line">        &lt;table tableName=&quot;user&quot; domainObjectName=&quot;User&quot; enableCountByExample=&quot;false&quot; enableUpdateByExample=&quot;false&quot; enableDeleteByExample=&quot;false&quot; enableSelectByExample=&quot;false&quot; selectByExampleQueryId=&quot;false&quot;&gt;&lt;/table&gt;</span><br><span class="line">    &lt;/context&gt;</span><br><span class="line">&lt;/generatorConfiguration&gt;</span><br></pre></td></tr></table></figure><p>找到该项目下的这个maven插件，点击run即可。生成的结果如上述目录结构中dao、model下的文件。生成了数据库表对应的Bean，以及mapper类。</p><p>5.在App启动类添加自动扫描mapper,使其能自动生成代理类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">package com.ccsu;</span><br><span class="line"></span><br><span class="line">import org.mybatis.spring.annotation.MapperScan;</span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@SpringBootApplication</span><br><span class="line">@MapperScan(&quot;com.ccsu.dao&quot;) //此处添加mapper扫描,mapper接口能自动生成代理类</span><br><span class="line">public class App &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(App.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来在相关地方编写登录注册逻辑即可。</p><p><strong>项目热部署支持</strong></p><p>spring为开发者提供了一个名为spring-boot-devtools的模块来使Spring Boot应用支持热部署，提高开发者的开发效率，无需手动重启Spring Boot应用。</p><p>修改pom.xml引入spring-boot-devtools。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--引入spring-boot-devtools--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;</span><br><span class="line">    &lt;optional&gt;true&lt;/optional&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>同时需要spring-boot-maven-plugin插件支持</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;plugin&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">    &lt;configuration&gt;</span><br><span class="line">        &lt;fork&gt;true&lt;/fork&gt;</span><br><span class="line">    &lt;/configuration&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure><p>还需要修改application.properties文件，开启热部署支持，默认是不开启的。</p><p>application.properties</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#热部署</span><br><span class="line">spring.devtools.livereload.enabled=true</span><br><span class="line">spring.devtools.remote.restart.enabled=true //默认false</span><br></pre></td></tr></table></figure><p>同时开发工具IDEA默认也不支持自动编译，需要进行修改；</p><ul><li><p>File-&gt;Settings-&gt;Compiler </p><p>  勾选 Build Project automatically</p></li><li><p>快捷键：ctrl + shift + alt + /,选择Registry</p><p>  勾上 Compiler autoMake allow when app running</p></li></ul><p><strong>SpringBoot单元测试</strong></p><p>进行单元测试，SpringBoot有专门的组件来支持，需要修改pom.xml，增加依赖：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">    &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>test目录下新建UserTests.java：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">package com.ccsu;</span><br><span class="line"></span><br><span class="line">import com.ccsu.dao.UserMapper;</span><br><span class="line">import com.ccsu.model.User;</span><br><span class="line">import org.junit.Test;</span><br><span class="line">import org.junit.runner.RunWith;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line">import org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line">import javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line">@RunWith(SpringRunner.class)//指定运行的单元测试组件，SpringRunner.class继承了SpringJUnit4ClassRunner，SpringBoot内置了Junit4,此处表示使用Junit4测试组件</span><br><span class="line">@SpringBootTest(classes = App.class) //@SpringBootTest标记为该类为springboot单元测试类，参数：classes = App.class指定启动类为App.class,及对应上述App.java</span><br><span class="line">public class UserTests &#123;</span><br><span class="line"></span><br><span class="line">    @Resource</span><br><span class="line">    private UserMapper userMapper;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void testUserAdd()&#123;</span><br><span class="line">        User user = new User();</span><br><span class="line">        user.setUsername(&quot;test&quot;);</span><br><span class="line">        user.setPasswd(&quot;test&quot;);</span><br><span class="line">        int userInsert = userMapper.insertSelective(user);</span><br><span class="line">        System.out.println(userInsert);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void testUserLogin()&#123;</span><br><span class="line">        User user = userMapper.findByUsernameAndPasswd(&quot;test&quot;, &quot;test&quot;);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>SpringBoot事务支持</strong></p><p>测试事务，在UserService中添加方法batchAdd，在方法中故意产生一个被0整除的异常</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">  * 测试事务</span><br><span class="line">  * 此处插入了两个User,在没有事务支持的情况下，在10/0发生异常的时候，第一个User将被插入到数据库中，第二个不会</span><br><span class="line">  * 在事务支持的情况下，在10/0发生异常的时候，第一个插入数据没有进行提交，会被回滚，即两个User都不会插入。在业务场景下，这种才是正确的</span><br><span class="line">  *</span><br><span class="line">  * @param username</span><br><span class="line">  * @param passwd</span><br><span class="line">  */</span><br><span class="line"> @Override</span><br><span class="line"> @Transactional</span><br><span class="line"> public void batchAdd(String username, String passwd) &#123;</span><br><span class="line">     User user1 = new User();</span><br><span class="line">     user1.setUsername(username);</span><br><span class="line">     user1.setPasswd(passwd);</span><br><span class="line">     userMapper.insertSelective(user1);</span><br><span class="line">     int i = 10 / 0;</span><br><span class="line">     User user2 = new User();</span><br><span class="line">     user2.setUsername(username);</span><br><span class="line">     user2.setPasswd(passwd);</span><br><span class="line">     userMapper.insertSelective(user2);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>在方式上方添加@Transactional注解，即加入事务支持，解决了事务问题;如果没有得到解决可在启动类上加入@EnableTransactionManagement注解。当然一般方法上加入@Transactional即可生效</p><p><strong>全局异常处理</strong></p><p>通过上面的步骤，已经解决事务问题，但是500的错误展示给用户看，对于用户来说极其不友好。</p><p>一般在企业里，对于这些异常一般都会统一捕获，由专门的异常处理类来统一处理。</p><p>新建目录utils,在该目录下新建GlobalExceptionHandler.java全局异常处理类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">package com.ccsu.utils;</span><br><span class="line"></span><br><span class="line">import org.springframework.web.bind.annotation.ControllerAdvice;</span><br><span class="line">import org.springframework.web.bind.annotation.ExceptionHandler;</span><br><span class="line">import org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 全局异常处理类</span><br><span class="line"> * 注解@ControllerAdvice会管理所有的@RestController</span><br><span class="line"> * 注解@ExceptionHandler表示异常处理</span><br><span class="line"> */</span><br><span class="line">@ControllerAdvice</span><br><span class="line">public class GlobalExceptionHandler &#123;</span><br><span class="line"></span><br><span class="line">    @ExceptionHandler(value = RuntimeException.class)</span><br><span class="line">    @ResponseBody</span><br><span class="line">    public Object defaultErrorHandler(HttpServletRequest request, Exception ex) throws Exception&#123;</span><br><span class="line">        ex.printStackTrace();</span><br><span class="line">        return &quot;我是一个异常处理类&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，用户就不会再看到系统直接返回的错误了。而是更友好的定义的提示。但是，当用户输入一个不存在的路由的时候，系统还是会显示404的糟糕提示。此时，我们需要处理404的提示，让它看上去更友好，一般企业开发中会定义好这种404页面，专门处理404。所以我们需要当发生404时，让其路由到404页面上。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">package com.ccsu.utils;</span><br><span class="line"></span><br><span class="line">import org.springframework.boot.web.server.ConfigurableWebServerFactory;</span><br><span class="line">import org.springframework.boot.web.server.ErrorPage;</span><br><span class="line">import org.springframework.boot.web.server.WebServerFactoryCustomizer;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.http.HttpStatus;</span><br><span class="line">import org.springframework.web.bind.annotation.ControllerAdvice;</span><br><span class="line">import org.springframework.web.bind.annotation.ExceptionHandler;</span><br><span class="line">import org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 全局异常处理类</span><br><span class="line"> * 注解@ControllerAdvice会管理所有的@RestController</span><br><span class="line"> * 注解@ExceptionHandler表示异常处理</span><br><span class="line"> */</span><br><span class="line">@ControllerAdvice</span><br><span class="line">public class GlobalExceptionHandler &#123;</span><br><span class="line"></span><br><span class="line">    @ExceptionHandler(value = RuntimeException.class)</span><br><span class="line">    @ResponseBody</span><br><span class="line">    public Object defaultErrorHandler(HttpServletRequest request, Exception ex) throws Exception&#123;</span><br><span class="line">        ex.printStackTrace();</span><br><span class="line">        return &quot;我是一个异常处理类&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public WebServerFactoryCustomizer&lt;ConfigurableWebServerFactory&gt; webServerFactoryCustomizer()&#123;</span><br><span class="line">        return (factory -&gt; &#123;</span><br><span class="line">            ErrorPage error404Page = new ErrorPage(HttpStatus.NOT_FOUND, &quot;/404&quot;);</span><br><span class="line">            factory.addErrorPages(error404Page);</span><br><span class="line">        &#125;);</span><br><span class="line">     /*   return new WebServerFactoryCustomizer&lt;ConfigurableWebServerFactory&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void customize(ConfigurableWebServerFactory factory) &#123;</span><br><span class="line">                ErrorPage error404Page = new ErrorPage(HttpStatus.NOT_FOUND, &quot;/404&quot;);</span><br><span class="line">                factory.addErrorPages(error404Page);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;*/</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上我们写了一个处理方法，让其定位到404的路由路径下，同时我们在Controller目录下新建一个BaseController.java来处理展示404。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">package com.ccsu.controller;</span><br><span class="line"></span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line">@RestController</span><br><span class="line">public class BaseController &#123;</span><br><span class="line">    @RequestMapping(&quot;/404&quot;)</span><br><span class="line">    public Object error_404()&#123;</span><br><span class="line">        return &quot;抱歉，你要找到页面被别人偷吃了!&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样我们就能在页面上看到更友好的处理结果了。</p><p>注意：WebServerFactoryCustomizer这种配置方式是在SpringBoot2之后才这样配置的，在1.x的版本需要用到的是EmbeddedServletContainerCustomizer</p><p><strong>静态资源的访问</strong></p><p>静态资源：js, css, html, 图片, 音视频等</p><p>静态资源路径:是指系统可以直接访问的路径，且路径下的所有文件均可被用户直接读取。</p><p>SpringBoot默认提供静态资源目录位置需要在classpath下，并且目录名需要符合规范：<br>/static 或者 /public</p><p>比如我们在resources目录下新建static目录，并任意放一个图片test.jpg。在浏览器地址栏输入localhost:8080/test.jpg,就可以直接访问。</p><p><strong>前端界面</strong></p><p>SpringBoot推荐使用模板引擎来渲染html,如果不是历史遗留项目，一定不要使用JSP，常用的模板引擎很多，有freemark,thymeleaf等；其实都大同小异，其中SpringBoot强烈推荐使用thymeleaf。</p><p>修改pom.xml添加thymeleaf的支持。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>新建ThymeleafController.java,此处使用@Controller注解，而不是@RestController：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">package com.ccsu.controller;</span><br><span class="line"></span><br><span class="line">import org.springframework.stereotype.Controller;</span><br><span class="line">import org.springframework.ui.ModelMap;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line">@Controller</span><br><span class="line">@RequestMapping(&quot;/tpl&quot;)</span><br><span class="line">public class ThymeleafController &#123;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;testThymeleaf&quot;)</span><br><span class="line">    public String testThymeleaf(ModelMap map) &#123;</span><br><span class="line">        //设置属性</span><br><span class="line">        map.addAttribute(&quot;name&quot;, &quot;lisl&quot;);</span><br><span class="line">        //testThymeleaf:即模板文件名称</span><br><span class="line">        //对应src/main/resources/templates/testThymeleaf.html</span><br><span class="line">        return &quot;testThymeleaf&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SpringBoot默认模板配置路径为：src/mian/resources/templates</p><p>所以我们在templates新建testThymeleaf.html文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html xmlns:th=&quot;http://www.w3.org/1999/xhtml&quot;&gt;</span><br><span class="line">&lt;head lang=&quot;en&quot;&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">    &lt;title&gt;testThymeleaf&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1 th:text=&quot;$&#123;name&#125;&quot;/&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>在浏览器输入：localhot:8080/tpl/testThymeleaf即可看到结果。</p><p><strong>集成Swagger2构建API文档</strong></p><p>Swagger2作用：</p><ul><li>随项目自动生成强大的RESTful API文档，减少工作量</li><li>API文档与代码整合在一起，便于同步更新API说明</li><li>页面测试功能来调试每个RESTful API</li></ul><p>修改pom.xml,添加Swagger2的相关依赖：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.9.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.9.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>现在Swagger2配置类，在utils目录下新建SwaggerConfig.java:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">package com.ccsu.utils;</span><br><span class="line"></span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import springfox.documentation.builders.ApiInfoBuilder;</span><br><span class="line">import springfox.documentation.builders.PathSelectors;</span><br><span class="line">import springfox.documentation.builders.RequestHandlerSelectors;</span><br><span class="line">import springfox.documentation.service.ApiInfo;</span><br><span class="line">import springfox.documentation.service.Contact;</span><br><span class="line">import springfox.documentation.spi.DocumentationType;</span><br><span class="line">import springfox.documentation.spring.web.plugins.Docket;</span><br><span class="line">import springfox.documentation.swagger2.annotations.EnableSwagger2;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Swagger2配置类</span><br><span class="line"> */</span><br><span class="line">@Configuration</span><br><span class="line">@EnableSwagger2</span><br><span class="line">public class SwaggerConfig &#123;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public Docket createRestApi()&#123;</span><br><span class="line">        return new Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(apiInfo())</span><br><span class="line">                .select()</span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(&quot;com.ccsu&quot;))//指定扫描包下面的注解</span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /*创建api的基本信息*/</span><br><span class="line">    private ApiInfo apiInfo()&#123;</span><br><span class="line">        return new ApiInfoBuilder()</span><br><span class="line">                .title(&quot;集成Swagger2构建RESRful APIs&quot;)</span><br><span class="line">                .description(&quot;集成Swagger2构建RESTful APIs&quot;)</span><br><span class="line">                .termsOfServiceUrl(&quot;https://baidu.com&quot;)</span><br><span class="line">                .contact(new Contact(&quot;lisl&quot;, &quot;cn.lisl&quot;,&quot;lisl@lisl.cn&quot;))</span><br><span class="line">                .version(&quot;1.0.0&quot;)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在Controller接口上加上Swagger描述注解，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">@ApiOperation(value = &quot;注册&quot;,notes = &quot;填写用户名密码进行注册&quot;)</span><br><span class="line">@ApiImplicitParams(&#123;</span><br><span class="line">        @ApiImplicitParam(name = &quot;username&quot;, value = &quot;用户名&quot; ,required = true, dataType = &quot;String&quot;),</span><br><span class="line">        @ApiImplicitParam(name = &quot;passwd&quot;, value = &quot;用户密码&quot;,required = true, dataType = &quot;String&quot;)</span><br><span class="line">&#125;)</span><br><span class="line">@RequestMapping(value = &quot;/register&quot;, method = RequestMethod.POST)</span><br><span class="line">public String register(String username, String passwd)&#123;</span><br><span class="line">    return userService.register(username, passwd)?&quot;注册成功&quot;:&quot;注册失败&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@ApiOperation(value = &quot;登录&quot;, notes = &quot;根据用户名和密码登录系统&quot;)</span><br><span class="line">@ApiImplicitParams(&#123;</span><br><span class="line">        @ApiImplicitParam(name = &quot;username&quot;, value = &quot;用户名&quot;,required = true, dataType = &quot;String&quot;),</span><br><span class="line">        @ApiImplicitParam(name = &quot;passwd&quot;, value = &quot;用户密码&quot;,required = true, dataType = &quot;String&quot;)</span><br><span class="line">&#125;)</span><br><span class="line">@RequestMapping(value = &quot;/login&quot;, method = RequestMethod.GET)</span><br><span class="line">public  String login(String username, String passwd)&#123;</span><br><span class="line">    return userService.Login(username, passwd)?&quot;登录成功&quot;:&quot;登录失败&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问：localhost:8080/swagger-ui.html即可看到最终结果。</p><p><strong>日志集成</strong></p><p>java有许多的日志组件，比如：log4j,log4j2,logback还有java自身提供的Java Util Logging,其实在SpringBoot中对这些组件都提供了支持，log4j，log4j2和logback都提供了支持。</p><p><em>Logback:</em></p><p>在SpringBoot中默认使用的日志工具是logback;所以我们可以直接使用。</p><p>修改UserController.java进行测试：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">private final Logger logger = LoggerFactory.getLogger(UserController.class);</span><br><span class="line"></span><br><span class="line">@RequestMapping(value = &quot;/hello&quot;, method = RequestMethod.GET)</span><br><span class="line">public String sayHello() &#123;</span><br><span class="line">    logger.info(&quot;这是一个Hello日志！&quot;);</span><br><span class="line">    return &quot;Hello World! 我的世界,我是世界的主宰！111&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是访问hello时就会看到控制台输出日志。</p><p>修改UserController把日志输出改为：</p><p>logger.debug(“这是Hello debug日志！”)</p><p>控制台不会输出日志，这是因为日志级别不够，日志级别等级为：</p><p>debug&lt;info&lt;warn&lt;Error&lt;Fatal；</p><p>此时如果要想控制台输出日志，则需要修改application.properties进行配置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#配置logback日志</span><br><span class="line">#指定哪些包的日志级别</span><br><span class="line">logging.level.root = INFO</span><br><span class="line">logging.level.org.springframework.web=debug</span><br><span class="line">logging.level.com.ccsu.controller=debug</span><br></pre></td></tr></table></figure><p>这个时候org.springframework.web和com.ccsu.controller的debug日志就可以输出来</p><p><em>日志文件</em></p><p>一般情况下，SpringBoot日志只会输出到控制台，不会输出到日志文件，但是，正式环境我们都需要写到日志文件中。这个时候需要修改application.properties，在文件中配置logging.file文件名称和logging.path路径。</p><p>注意：如果只配置loggin.path,在/var/tmp文件夹生成日志文件为spring.log.如果只配置了loggin.file,会在项目的当前路径下生成一个xxx.log日志文件。</p><p>如果logging.path和logging.file都配置具体路径和文件，则只会logging.file生效，所以要指定日志生成的具体位置只使用logging.file写好路径和文件名即可；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#指定日志输出文件</span><br><span class="line">logging.file=D:\\java\\log\\spingboot.log</span><br></pre></td></tr></table></figure><p>这样就可输出日志到指定的日志文件了。</p><p><em>log4j2</em></p><p>修改pom.xml，添加log4j2的依赖：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-log4j2&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>同时需要注意的是由于默认使用的是logback,在扩展之前需要先把logback移除：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">    &lt;exclusions&gt;</span><br><span class="line">        &lt;exclusion&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-logging&lt;/artifactId&gt;</span><br><span class="line">        &lt;/exclusion&gt;</span><br><span class="line">    &lt;/exclusions&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>使用跟logback一样。如上logback所述。</p><p><strong>使用AOP统一日志处理</strong></p><p>修改pom.xml,添加aop依赖。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-aop&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.1.2.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>在utils下新增AOP日志处理类：WebLogAspect.java</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">package com.ccsu.utils;</span><br><span class="line"></span><br><span class="line">import org.aspectj.lang.JoinPoint;</span><br><span class="line">import org.aspectj.lang.annotation.AfterReturning;</span><br><span class="line">import org.aspectj.lang.annotation.Aspect;</span><br><span class="line">import org.aspectj.lang.annotation.Before;</span><br><span class="line">import org.aspectj.lang.annotation.Pointcut;</span><br><span class="line">import org.slf4j.Logger;</span><br><span class="line">import org.slf4j.LoggerFactory;</span><br><span class="line">import org.springframework.context.annotation.EnableAspectJAutoProxy;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line">import org.springframework.web.context.request.RequestContextHolder;</span><br><span class="line">import org.springframework.web.context.request.ServletRequestAttributes;</span><br><span class="line"></span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import java.util.Enumeration;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@Component</span><br><span class="line">@Aspect</span><br><span class="line">public class WebLogAspect &#123;</span><br><span class="line">    private static final Logger logger = LoggerFactory.getLogger(WebLogAspect.class);</span><br><span class="line"></span><br><span class="line">    @Pointcut(&quot;execution(public * com.ccsu.controller.*.*(..))&quot;)</span><br><span class="line">    public void webLog() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Before(&quot;webLog()&quot;)</span><br><span class="line">    public void doBefore(JoinPoint joinPoint) throws Throwable &#123;</span><br><span class="line">        // 接收到请求，记录请求内容</span><br><span class="line">        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();</span><br><span class="line">        HttpServletRequest request = attributes.getRequest();</span><br><span class="line">        // 记录下请求内容</span><br><span class="line">        logger.info(&quot;URL : &quot; + request.getRequestURL().toString());</span><br><span class="line">        logger.info(&quot;HTTP_METHOD : &quot; + request.getMethod());</span><br><span class="line">        logger.info(&quot;IP : &quot; + request.getRemoteAddr());</span><br><span class="line">        Enumeration&lt;String&gt; enu = request.getParameterNames();</span><br><span class="line">        while (enu.hasMoreElements()) &#123;</span><br><span class="line">            String name = (String) enu.nextElement();</span><br><span class="line">            logger.info(&quot;name:&#123;&#125;,value:&#123;&#125;&quot;, name, request.getParameter(name));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @AfterReturning(returning = &quot;ret&quot;, pointcut = &quot;webLog()&quot;)</span><br><span class="line">    public void doAfterReturning(Object ret) throws Throwable &#123;</span><br><span class="line">        // 处理完请求，返回内容</span><br><span class="line">        logger.info(&quot;RESPONSE : &quot; + ret);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，每次请求接口时，就都会有基本的日志打印。</p><h2 id="编译打包"><a href="#编译打包" class="headerlink" title="编译打包"></a>编译打包</h2><p>快速入门进行到这里，其实已经差不多了，能应对绝大多数开发常见，接下来就是导包部署。</p><p>修改pom.xml,引入maven的编译插件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;build&gt;</span><br><span class="line">    &lt;plugins&gt;</span><br><span class="line">        &lt;plugin&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;</span><br><span class="line">            &lt;configuration&gt;</span><br><span class="line">                &lt;source&gt;1.8&lt;/source&gt;</span><br><span class="line">                &lt;target&gt;1.8&lt;/target&gt;</span><br><span class="line">            &lt;/configuration&gt;</span><br><span class="line">        &lt;/plugin&gt;</span><br><span class="line">        &lt;plugin&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">            &lt;configuration&gt;</span><br><span class="line">                &lt;!-- 如果不设置fork,那么不会restart,devtools热部署不会起作用--&gt;</span><br><span class="line">                &lt;fork&gt;true&lt;/fork&gt;</span><br><span class="line">            &lt;/configuration&gt;</span><br><span class="line">            &lt;executions&gt;</span><br><span class="line">                &lt;execution&gt;</span><br><span class="line">                    &lt;goals&gt;</span><br><span class="line">                        &lt;goal&gt;repackage&lt;/goal&gt;</span><br><span class="line">                    &lt;/goals&gt;</span><br><span class="line">                &lt;/execution&gt;</span><br><span class="line">            &lt;/executions&gt;</span><br><span class="line"></span><br><span class="line">        &lt;/plugin&gt;</span><br><span class="line">    &lt;/plugins&gt;</span><br><span class="line">&lt;/build&gt;</span><br></pre></td></tr></table></figure><p>使用命令:mvn clean package 即可打包。</p><p>使用 java -jar xxxx.jar 即可运行。</p><p><strong>war部署</strong></p><p>如果并不希望使用内置的tomcat，希望部署到其他tomcat服务器，那么就需要使用war包部署了。</p><p>修改pom.xml,打包方式改成war:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;groupId&gt;com.ccsu&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;study&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">&lt;name&gt;study&lt;/name&gt;</span><br><span class="line">&lt;packaging&gt;war&lt;/packaging&gt; //修改此处为war</span><br><span class="line">&lt;description&gt;Demo project for Spring Boot&lt;/description&gt;</span><br></pre></td></tr></table></figure><p>修改在pom文件，剔除内置tomcat的支持，否则会和外面的tomcat冲突:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-tomcat&lt;/artifactId&gt;</span><br><span class="line">    &lt;!--打包的时候可以不用包进去，别的设施会提供。事实上该依赖理论上可以参与编译，测试，运行等周期。</span><br><span class="line">        相当于compile，但是打包阶段做了exclude操作--&gt;</span><br><span class="line">    &lt;scope&gt;provided&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>修改启动类，使其继承<br>org.springframework.boot.web.servlet.support.SpringBootServletInitializer，并重写configure方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">package com.ccsu;</span><br><span class="line"></span><br><span class="line">import org.mybatis.spring.annotation.MapperScan;</span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">import org.springframework.boot.builder.SpringApplicationBuilder;</span><br><span class="line">import org.springframework.boot.web.servlet.support.SpringBootServletInitializer;</span><br><span class="line">import org.springframework.transaction.annotation.EnableTransactionManagement;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@SpringBootApplication</span><br><span class="line">@MapperScan(&quot;com.ccsu.dao&quot;)</span><br><span class="line">@EnableTransactionManagement</span><br><span class="line">public class App extends SpringBootServletInitializer &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(App.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected SpringApplicationBuilder configure(SpringApplicationBuilder builder) &#123;</span><br><span class="line">        return builder.sources(App.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用mvn clean  package 打包</p><p>把war包拷贝到tomcat webapps中,即可访问。</p><h2 id="集成redis"><a href="#集成redis" class="headerlink" title="集成redis"></a>集成redis</h2><p>修改pom.xml，添加依赖：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--redis--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>修改application.properties,添加redis配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#redis</span><br><span class="line">#redis数据索引，默认为0</span><br><span class="line">spring.redis.database=0</span><br><span class="line">#Redis服务器地址</span><br><span class="line">spring.redis.host=localhost</span><br><span class="line">#redis服务器连接端口</span><br><span class="line">spring.redis.port=6379</span><br><span class="line">#redis连接密码，默认为空</span><br><span class="line">spring.redis.password=</span><br><span class="line">#redis连接超时时间</span><br><span class="line">spring.redis.timeout=5000</span><br></pre></td></tr></table></figure><p>新增单元测试类，进行测试；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">package com.ccsu;</span><br><span class="line"></span><br><span class="line">import org.junit.Test;</span><br><span class="line">import org.junit.runner.RunWith;</span><br><span class="line">import org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line">import org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line">import org.springframework.data.redis.core.ValueOperations;</span><br><span class="line">import org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line">import javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line">@SpringBootTest(classes = App.class)</span><br><span class="line">@RunWith(SpringRunner.class)</span><br><span class="line">public class SpringRedisTests &#123;</span><br><span class="line"></span><br><span class="line">    @Resource</span><br><span class="line">    private RedisTemplate&lt;String,String&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void  testRedis()&#123;</span><br><span class="line">        ValueOperations&lt;String, String&gt; ops = redisTemplate.opsForValue();</span><br><span class="line">        ops.set(&quot;name&quot;,&quot;lisl&quot;);</span><br><span class="line">        System.out.println(ops.get(&quot;name&quot;));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行，即可看到输出结果。</p><h2 id="集成RabbitMQ"><a href="#集成RabbitMQ" class="headerlink" title="集成RabbitMQ"></a>集成RabbitMQ</h2><p>修改pom.xml,添加rabbitmq依赖：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--rabbitmq--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-amqp&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>修改application.properties，添加rabbitmq的配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#rabbitmq</span><br><span class="line">spring.rabbitmq.host=192.168.80.10</span><br><span class="line">spring.rabbitmq.port=5672</span><br><span class="line">spring.rabbitmq.username=guest</span><br><span class="line">spring.rabbitmq.password=guest</span><br></pre></td></tr></table></figure><p>创建Rabbit配置类，用来配置队列，交换器，路由等高级信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">package com.ccsu.utils;</span><br><span class="line"></span><br><span class="line">import org.springframework.amqp.core.Queue;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@Configuration</span><br><span class="line">public class RabbitConfig &#123;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public Queue firstQueue()&#123;</span><br><span class="line">        //创建一个名为lisl的队列</span><br><span class="line">        return new Queue(&quot;lisl&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建消息的生产者：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">package com.ccsu.mq;</span><br><span class="line"></span><br><span class="line">import org.springframework.amqp.core.AmqpTemplate;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">import javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line">@Component</span><br><span class="line">public class Producer &#123;</span><br><span class="line"></span><br><span class="line">    @Resource</span><br><span class="line">    private AmqpTemplate rabbitAmqpTemplate;</span><br><span class="line"></span><br><span class="line">    public void send()&#123;</span><br><span class="line">        rabbitAmqpTemplate.convertAndSend(&quot;lisl&quot;,&quot;my name is lisl!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建消息的消费者，消费者监听队列来消费消息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">package com.ccsu.mq;</span><br><span class="line"></span><br><span class="line">import org.springframework.amqp.rabbit.annotation.RabbitHandler;</span><br><span class="line">import org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">@Component</span><br><span class="line">//定义需要监听的队列</span><br><span class="line">@RabbitListener(queues = &quot;lisl&quot;)</span><br><span class="line">public class Consumer &#123;</span><br><span class="line"></span><br><span class="line">    //指定对消息的处理</span><br><span class="line">    @RabbitHandler</span><br><span class="line">    public void process(String message)&#123;</span><br><span class="line">        System.out.println(&quot;receive message:&quot;+message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建单元测试类，进行测试：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">package com.ccsu;</span><br><span class="line"></span><br><span class="line">import com.ccsu.mq.Producer;</span><br><span class="line">import org.junit.Test;</span><br><span class="line">import org.junit.runner.RunWith;</span><br><span class="line">import org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line">import org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line">import javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line">@SpringBootTest(classes = App.class)</span><br><span class="line">@RunWith(SpringRunner.class)</span><br><span class="line">public class RabbitMqTests &#123;</span><br><span class="line"></span><br><span class="line">    @Resource</span><br><span class="line">    private Producer producer;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void testRabbitmq()&#123;</span><br><span class="line">        producer.send();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行之后，即可看到消费者消费的消息。</p><h2 id="Actuator监控管理"><a href="#Actuator监控管理" class="headerlink" title="Actuator监控管理"></a>Actuator监控管理</h2><p>Actuator是spring boot的一个附加功能,可帮助你在应用程序生产环境时监视和管理应用程序。可以使用HTTP的各种请求来监管,审计,收集应用的运行情况.特别对于微服务管理十分有意义。</p><p>缺点：没有可视化界面</p><p>修改pom.xml添加依赖：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--actuator--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>修改application.properties，启动监控端点：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#actuator</span><br><span class="line"># 加载所有的端点/默认只加载了 info / health</span><br><span class="line">management.endpoints.web.exposure.include=*</span><br><span class="line"># 描述信息</span><br><span class="line">info.blog-url=http://lisl.cn</span><br><span class="line">info.author=lisl</span><br><span class="line">info.version=@project.version@</span><br></pre></td></tr></table></figure><p>重新启动，在地址栏输入<br><a href="http://localhost:8080/actuator/info即可看到监控信息。" target="_blank" rel="noopener">http://localhost:8080/actuator/info即可看到监控信息。</a></p><p>Actuator访问路径</p><p>通过actuator/+端点名就可以获取相应的信息。</p><table><thead><tr><th>路径</th><th>作用</th></tr></thead><tbody><tr><td>/actuator/beans</td><td>显示应用程序中所有Spring bean的完整列表。</td></tr><tr><td>/actuator/configprops</td><td>显示所有配置信息。</td></tr><tr><td>/actuator/env</td><td>陈列所有的环境变量。</td></tr><tr><td>/actuator/mappings</td><td>显示所有@RequestMapping的url整理列表。</td></tr><tr><td>/actuator/health</td><td>显示应用程序运行状况信息 up表示成功 down失败</td></tr><tr><td>/actuator/info</td><td>查看自定义应用信息</td></tr></tbody></table><h2 id="自定义starter"><a href="#自定义starter" class="headerlink" title="自定义starter"></a>自定义starter</h2><p>在学习SpringBoot的过程中，不管是集成redis还是RabbitMQ，甚至是前面集成mybatis已经学习了很多starter，这些starter都是springboot为我们提供的一些封装，这些starter能非常方便快捷的增加功能，并不需要很多配置，即使需要配置也就在application.properties稍微配置下就可以了。</p><p>那么接下来就初步认识怎么创建属于自己的starter</p><p>自己集成redis，创建redis-starter插件：</p><p>自定义starter,我们可以根据查看其他的starter,可以理清楚基本的思路；</p><p>自定义starter:</p><ol><li>首先，需要一个属性配置类；即：xxxxProperties.java</li></ol><p>该配置类即定义application.properties需要的属性</p><ol start="2"><li><p>其次，我们需要一个自动配置类，让前面定义的属性能够生效，即xxxxAutoConfiguration.java</p></li><li><p>最后，我们需要在META-INF下定义spring.factories文件；这个文件我们查看其它starter可发现，SpringBoot会去扫描这个文件，查找自动化配置；让SpringBoot能够找到自动化配置类xxxAutoConfiguration.java。</p></li></ol><p>根据以上思路，我们开始来自定义一个starter,及上述所说的redis-starter。</p><p><em>首先</em>，我们创建一个简单的maven项目。这个项目不需要web,就是一个简单的maven项目。</p><p>修改pom.xml，仅仅引入SpringBoot依赖。当然，同时我们需要引入redis包依赖。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;</span><br><span class="line">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;groupId&gt;learn&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;redis-starter&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;2.1.3.RELEASE&lt;/version&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;redis.clients&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;jedis&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><p>然后，根据我们之前的思路，<strong>第一步，创建属性配置定义类，定义配置属性，用于加载redis需要的配置。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">package cn.lisl.redis;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"></span><br><span class="line">@ConfigurationProperties(prefix = &quot;redis&quot;)</span><br><span class="line">public class RedisProperties &#123;</span><br><span class="line"></span><br><span class="line">    private String host;</span><br><span class="line">    private int port;</span><br><span class="line"></span><br><span class="line">    public String getHost() &#123;</span><br><span class="line">        return host;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setHost(String host) &#123;</span><br><span class="line">        this.host = host;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getPort() &#123;</span><br><span class="line">        return port;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setPort(int port) &#123;</span><br><span class="line">        this.port = port;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注解@ConfigurationProperties，用于定义application.properties中属性的前缀，即：redis.host、redis.port</p><p><strong>第二步，创建一个配置类，这个配置类用于加载配置，并实例化Jedis客户端</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">package cn.lisl.redis;</span><br><span class="line"></span><br><span class="line">import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;</span><br><span class="line">import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;</span><br><span class="line">import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;</span><br><span class="line">import org.springframework.boot.context.properties.EnableConfigurationProperties;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import redis.clients.jedis.Jedis;</span><br><span class="line"></span><br><span class="line">@Configuration//开启配置</span><br><span class="line">@ConditionalOnClass(Jedis.class)</span><br><span class="line">@EnableConfigurationProperties(&#123;RedisProperties.class&#125;)//开启使用映射实体对象</span><br><span class="line">@ConditionalOnProperty//存在对应配置信息时初始化该配置类</span><br><span class="line">(</span><br><span class="line">        prefix = &quot;redis&quot;,//存在配置前缀redis</span><br><span class="line">        value = &quot;enabled&quot;,//开启</span><br><span class="line">        matchIfMissing = true//缺失检查</span><br><span class="line">)</span><br><span class="line">public class RedisAutoConfiguration &#123;</span><br><span class="line">    @Bean</span><br><span class="line">    @ConditionalOnMissingBean</span><br><span class="line">    public Jedis jedis(RedisProperties redisProperties)&#123;</span><br><span class="line">        return  new Jedis(redisProperties.getHost(),redisProperties.getPort());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自动化配置代码中有很多我们之前没有用到的注解配置，我们从上开始讲解</p><p>@Configuration：这个配置就不用多做解释了，我们一直在使用，用于定义配置，开启配置的功能</p><p>@EnableConfigurationProperties：这是一个开启使用配置参数的注解，value值就是我们配置实体参数映射的ClassType，将配置实体作为配置来源。</p><p>SpringBoot内置条件注解<br>有关@ConditionalOnXxx相关的 注解这里要系统的说下，因为这个是我们配置的关键，根据名称我们可以理解为具有Xxx条件，当然它实际的意义也是如此，条件注解是一个系列，下面我们详细做出解释</p><p>@ConditionalOnBean：当SpringIoc容器内存在指定Bean的条件</p><p>@ConditionalOnClass：当SpringIoc容器内存在指定Class的条件</p><p>@ConditionalOnExpression：基于SpEL表达式作为判断条件</p><p>@ConditionalOnJava：基于JVM版本作为判断条件</p><p>@ConditionalOnMissingBean：当SpringIoc容器内不存在指定Bean的条件</p><p>@ConditionalOnMissingClass：当SpringIoc容器内不存在指定Class的条件</p><p>@ConditionalOnNotWebApplication：当前项目不是Web项目的条件</p><p>@ConditionalOnProperty：指定的属性是否有指定的值</p><p>@ConditionalOnResource：类路径是否有指定的值</p><p>@ConditionalOnSingleCandidate：当指定Bean在SpringIoc容器内只有一个，或者虽然有多个但是指定首选的Bean</p><p>@ConditionalOnWebApplication：当前项目是Web项目的条件<br>以上注解都是元注解@Conditional演变而来的，根据不用的条件对应创建以上的具体条件注解。</p><p>上述我们已经说了思路，但思路是怎么来的，我们其实是通过在查看注解@SpringBootApplication时发现，注解@SpringBootApplication上存在一个开启自动化配置的注解@EnableAutoConfiguration来完成自动化配置，注解源码如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">@AutoConfigurationPackage</span><br><span class="line">@Import(AutoConfigurationImportSelector.class)</span><br><span class="line">public @interface EnableAutoConfiguration &#123;</span><br><span class="line"></span><br><span class="line">String ENABLED_OVERRIDE_PROPERTY = &quot;spring.boot.enableautoconfiguration&quot;;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Exclude specific auto-configuration classes such that they will never be applied.</span><br><span class="line"> * @return the classes to exclude</span><br><span class="line"> */</span><br><span class="line">Class&lt;?&gt;[] exclude() default &#123;&#125;;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Exclude specific auto-configuration class names such that they will never be</span><br><span class="line"> * applied.</span><br><span class="line"> * @return the class names to exclude</span><br><span class="line"> * @since 1.3.0</span><br><span class="line"> */</span><br><span class="line">String[] excludeName() default &#123;&#125;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在@EnableAutoConfiguration注解内使用到了@import注解来完成导入配置的功能，而EnableAutoConfigurationImportSelector内部则是使用了SpringFactoriesLoader.loadFactoryNames方法进行扫描具有META-INF/spring.factories文件的jar包。源码部分如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">protected List&lt;String&gt; getCandidateConfigurations(AnnotationMetadata metadata,</span><br><span class="line">AnnotationAttributes attributes) &#123;</span><br><span class="line">List&lt;String&gt; configurations = SpringFactoriesLoader.loadFactoryNames(</span><br><span class="line">getSpringFactoriesLoaderFactoryClass(), getBeanClassLoader());</span><br><span class="line">Assert.notEmpty(configurations,</span><br><span class="line">&quot;No auto configuration classes found in META-INF/spring.factories. If you &quot;</span><br><span class="line">+ &quot;are using a custom packaging, make sure that file is correct.&quot;);</span><br><span class="line">return configurations;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以先看下spring-boot-autoconfigure包内的spring.factories文件内容，可以看到配置的结构形式是Key=&gt;Value形式，多个Value时使用,隔开，那我们在自定义starter内也可以使用这种形式来完成，我们的目的是为了完成自动化配置，所以我们这里Key则是需要使用org.springframework.boot.autoconfigure.EnableAutoConfiguration</p><p>所以，<strong>第三步，我需要自定义spring.factories</strong>；</p><p>在src/main/resource目录下创建META-INF目录，并在目录内添加文件spring.factories</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#配置自定义Starter的自动化配置</span><br><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=cn.lisl.redis.RedisAutoConfiguration</span><br></pre></td></tr></table></figure><p>至此，我们自定义starter已经完成。</p><p>最后，我们新建一个SpringBoot项目来测试它。</p><p>新建项目如：testRedisStarter</p><p>修改pom.xml,引入自定义的starter依赖：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;</span><br><span class="line">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;groupId&gt;lisl&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;testRedisStarter&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;2.1.3.RELEASE&lt;/version&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!--此处引入自定义starter--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;learn&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;redis-starter&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><p>新建启动类，App.java:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">package cn.lisl;</span><br><span class="line"></span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line">@SpringBootApplication</span><br><span class="line">public class App &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(App.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新建application.properties在里面配置redis连接相关信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#即自定义的属性，以redis为前缀</span><br><span class="line">redis.host=localhost</span><br><span class="line">redis.port=6379</span><br></pre></td></tr></table></figure><p>新建单元测试类，进行测试：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">package cn.lisl.test;</span><br><span class="line"></span><br><span class="line">import cn.lisl.App;</span><br><span class="line">import org.junit.Test;</span><br><span class="line">import org.junit.runner.RunWith;</span><br><span class="line">import org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line">import org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line">import redis.clients.jedis.Jedis;</span><br><span class="line"></span><br><span class="line">import javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line">@SpringBootTest(classes = App.class)</span><br><span class="line">@RunWith(SpringRunner.class)</span><br><span class="line">public class RedisTests &#123;</span><br><span class="line"></span><br><span class="line">    @Resource</span><br><span class="line">    private Jedis jedis;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void testRedis()&#123;</span><br><span class="line">        jedis.set(&quot;lisl&quot;, &quot;99&quot;);</span><br><span class="line">        System.out.println(jedis.get(&quot;lisl&quot;));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行之后，我们可以看到已经可以使用redis，并进行操作了。但我们其实并没有引入其他redis相关的东西，只引入了我们自定义的starter,说明我们自定义的starter已经成功生效了。</p><p>到这一步，自定义redis-stater搞定。</p><h2 id="SpringBoot-CLI"><a href="#SpringBoot-CLI" class="headerlink" title="SpringBoot CLI"></a>SpringBoot CLI</h2><p>Spring Boot CLI是一个命令行工具，如果想使用Spring进行快速开发可以使用它。它允许你运行Groovy脚本，这意味着你可以使用熟悉的类Java语法，并且没有那么多的模板代码。你可以通过Spring Boot CLI启动新项目，或为它编写命令。</p><p>Groovy是个基于JVM(Java虚拟机)的敏捷开发语音，既然是基于jvm,那么在groovy里面使用任何java的组件他都是可以支持识别的.</p><p>解压安装SpringBoot CLI<br><a href="https://repo.spring.io/release/org/springframework/boot/spring-boot-cli/2.1.2.RELEASE/spring-boot-cli-2.1.2.RELEASE-bin.zip" target="_blank" rel="noopener">https://repo.spring.io/release/org/springframework/boot/spring-boot-cli/2.1.2.RELEASE/spring-boot-cli-2.1.2.RELEASE-bin.zip</a></p><p>新建一个groovy的文件 hello.groovy:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">class WebApplication &#123;</span><br><span class="line">@RequestMapping(&quot;/&quot;)</span><br><span class="line">String home() &#123;</span><br><span class="line">&quot;Hello World!&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用命令即可以启动 </p><p>.\spring.bat run .\hello.groovy</p><p>此时，它会自动下载依赖，并运行项目。</p><p><strong>快速构建项目</strong></p><p>刚开始学习springboot的时候经常使用<a href="http://start.spring.io/" target="_blank" rel="noopener">http://start.spring.io/</a> 构建项目；</p><p>其实这个功能你完全也可以使用 SpringBoot CLI，完成构建<br>使用命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./spring init --build=maven --java-version=1.8 --dependencies=web --packaging=jar --boot-version=1.5.3.RELEASE --groupId=enjoy --artifactId=demo</span><br></pre></td></tr></table></figure><p>即会在当前目录下，生成SpringBoot项目。</p><h2 id="SpringBoot性能优化"><a href="#SpringBoot性能优化" class="headerlink" title="SpringBoot性能优化"></a>SpringBoot性能优化</h2><p>在默认情况下，我们会使用@SpringBootApplication注解来自动获取应用的配置信息，但这样也会带来一些副作用。使用这个注解后，会触发自动配置（auto-configuration）和组件扫描（component scanning），这跟使用@Configuration、@EnableAutoConfiguration和@ComponentScan三个注解的作用是一样的。这样做给开发带来方便的同时，会有以下的一些影响：</p><ul><li>会导致项目启动时间变长（原因：加载了我们不需要使用的组件,浪费了cpu资源和内存资源）。当启动一个大的应用程序，或将做大量的集成测试启动应用程序时，影响会特别明显。</li><li>会加载一些不需要的多余的实例（beans）</li><li>会增加CPU消耗和内存的占用。</li></ul><p>针对以上的问题，我们要怎么解决呢？很明显，既然@SpringBootApplication加载了一些不必要的配置，那么我们想是否可以就加载我们自己指定的配置呢？</p><p>我们的思路是不使用@SpringBootApplication，并且不使用@ComponentScan注解（此注解会自动扫描我们注解了@Controller，@Service的注解的类，加载到Spring IOC容器中），然后我们使用@Configuration和@EnableAutoConfiguration进行配置启动类</p><p>新建项目，只引入web：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;</span><br><span class="line">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;groupId&gt;com.lisl&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;xnspringboot&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line"></span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;2.1.3.RELEASE&lt;/version&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><p>新建Controller:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">package com.lisl.controller;</span><br><span class="line"></span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line">@RestController</span><br><span class="line">public class UserController &#123;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;/hello&quot;)</span><br><span class="line">    public String sayHello()&#123;</span><br><span class="line">        return &quot;Hello World!&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新建启动类：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">package com.lisl;</span><br><span class="line"></span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">//import org.springframework.boot.autoconfigure.EnableAutoConfiguration;</span><br><span class="line">//import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">//@SpringBootApplication</span><br><span class="line">@EnableAutoConfiguration</span><br><span class="line">@Configuration</span><br><span class="line">@ComponentScan(&quot;com.lisl.controller&quot;)</span><br><span class="line">public class App &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(App.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们用三个注解代替：@SpringBootApplication 注解</p><p>@EnableAutoConfiguration</p><p>@Configuration</p><p>@ComponentScan(“com.lisl.controller”)</p><p>这样就不会去扫描所有目录，而只扫描我们指定的com.lisl.controller 这样，我们可以减少一点启动时间。</p><p>但前面我们知道@EnableAutoConfiguration注解会导入META-INF/spring.factories里面配置的很多Configuration，这些Configuration他都会去扫描</p><p>在启动VM参数里面加入 <strong>-Ddebug</strong></p><p>控制台会输出一些日志信息，主要是这几大类：</p><ul><li>Positive matches:<br>匹配（以及匹配的原因）</li><li>Negative matches:<br>忽略匹配（以及忽略的原因）</li><li>Exclusions:<br>排除的配置类</li><li>Unconditional classes:<br>没有带任何条件，肯定要扫描的类</li></ul><p>根据上面的理论知识，我们只需要在启动的时候，显式地引入这些组件<br>需要的组件=Positive matches+Unconditional classes</p><p>我们可以不使用@EnableAutoConfiguration，转而显示的使用@Import来导入需要的配置类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">package com.lisl;</span><br><span class="line"></span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">//import org.springframework.boot.autoconfigure.EnableAutoConfiguration;</span><br><span class="line">//import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration;</span><br><span class="line">import org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration;</span><br><span class="line">import org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration;</span><br><span class="line">import org.springframework.boot.autoconfigure.http.codec.CodecsAutoConfiguration;</span><br><span class="line">import org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration;</span><br><span class="line">import org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration;</span><br><span class="line">import org.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration;</span><br><span class="line">import org.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration;</span><br><span class="line">import org.springframework.boot.autoconfigure.task.TaskSchedulingAutoConfiguration;</span><br><span class="line">import org.springframework.boot.autoconfigure.validation.ValidationAutoConfiguration;</span><br><span class="line">import org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfiguration;</span><br><span class="line">import org.springframework.boot.autoconfigure.web.embedded.EmbeddedWebServerFactoryCustomizerAutoConfiguration;</span><br><span class="line">import org.springframework.boot.autoconfigure.web.servlet.*;</span><br><span class="line">import org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration;</span><br><span class="line">import org.springframework.boot.autoconfigure.websocket.servlet.WebSocketServletAutoConfiguration;</span><br><span class="line">import org.springframework.context.annotation.ComponentScan;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import org.springframework.context.annotation.Import;</span><br><span class="line"></span><br><span class="line">//@SpringBootApplication</span><br><span class="line">//@EnableAutoConfiguration</span><br><span class="line">@Configuration</span><br><span class="line">@ComponentScan(&quot;com.lisl.controller&quot;)</span><br><span class="line">@Import(&#123;</span><br><span class="line">        CodecsAutoConfiguration.class,</span><br><span class="line">        DispatcherServletAutoConfiguration.class,</span><br><span class="line">        EmbeddedWebServerFactoryCustomizerAutoConfiguration.class,</span><br><span class="line">        ErrorMvcAutoConfiguration.class,</span><br><span class="line">        HttpEncodingAutoConfiguration.class,</span><br><span class="line">        HttpMessageConvertersAutoConfiguration.class,</span><br><span class="line">        JacksonAutoConfiguration.class,</span><br><span class="line">        ServletWebServerFactoryAutoConfiguration.class,</span><br><span class="line">        WebMvcAutoConfiguration.class,</span><br><span class="line">        ValidationAutoConfiguration.class,</span><br><span class="line"></span><br><span class="line">        MultipartAutoConfiguration.class,</span><br><span class="line">        JmxAutoConfiguration.class,</span><br><span class="line">        RestTemplateAutoConfiguration.class,</span><br><span class="line">        WebSocketServletAutoConfiguration.class,</span><br><span class="line">        TaskExecutionAutoConfiguration.class,</span><br><span class="line">        TaskSchedulingAutoConfiguration.class,</span><br><span class="line">        ConfigurationPropertiesAutoConfiguration.class,</span><br><span class="line">        PropertyPlaceholderAutoConfiguration.class,</span><br><span class="line">        ProjectInfoAutoConfiguration.class</span><br><span class="line">&#125;)</span><br><span class="line">public class App &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(App.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外也可以删除一些虽然匹配到了，但是在项目中目前并没有使用到的配置，比如<br>任务调度：TaskExecutionAutoConfiguration，TaskSchedulingAutoConfiguration<br>WebSocket:WebSocketServletAutoConfiguration<br>附件上传：MultipartAutoConfiguration<br>JMX：JmxAutoConfiguration<br>等等</p><h2 id="JVM参数调优"><a href="#JVM参数调优" class="headerlink" title="JVM参数调优"></a>JVM参数调优</h2><p>启动App，使用jdk里面jvisualvm.exe 查看当前进程。</p><p>这个时候内存分配了2个G，可以根据需要，判断是否需要这么大，一般来说1个G足够，尤其是微服务</p><p>另外还发现最大值和最小值两个设置的并不一样，来看下会有什么问题</p><ol><li>设置JVM参数</li></ol><p>-XX:+PrintGCDetails -Xmx32M -Xms1M</p><p>这样设置后发现有大量的GC，更可怕的还有大量的FULL GC存在</p><p>频繁的GC对性能影响是很大的。</p><p>频繁调用<a href="http://localhost:8080/hello，发现垃圾回收特别频繁" target="_blank" rel="noopener">http://localhost:8080/hello，发现垃圾回收特别频繁</a></p><ol start="2"><li>设置JVM参数，把最大的内存数设置成1024</li></ol><p>-XX:+PrintGCDetails -Xmx1024M -Xms1M</p><p>GC次数明显减少，但既然还会出现几个full GC</p><p>频繁调用<a href="http://localhost:8080/hello，发现垃圾回收依然特别频繁，这不断的申请内存，释放内存对性能是有不小的影响" target="_blank" rel="noopener">http://localhost:8080/hello，发现垃圾回收依然特别频繁，这不断的申请内存，释放内存对性能是有不小的影响</a></p><ol start="3"><li>置JVM参数，把最大的内存数设置成1024，最小内存也设置成1024</li></ol><p>-XX:+PrintGCDetails -Xmx1024M -Xms1024M</p><p>这个时候再重启，发现不管是gc还是full gc 都明显的减少了次数</p><p>这个时候再来频繁调用<a href="http://localhost:8080/hello，发现内存的使用比较均匀了" target="_blank" rel="noopener">http://localhost:8080/hello，发现内存的使用比较均匀了</a></p><h2 id="Undertow容器"><a href="#Undertow容器" class="headerlink" title="Undertow容器"></a>Undertow容器</h2><p>默认情况下，Spring Boot 使用 Tomcat 来作为内嵌的 Servlet 容器<br> 可以将 Web 服务器切换到 Undertow 来提高应用性能。</p><p>Undertow 是一个采用 Java 开发的灵活的高性能 Web 服务器，提供包括阻塞和基于 NIO 的非堵塞机制。Undertow 是红帽公司的开源产品</p><p>首先使用tomcat测试，使用Jmeter，使用1个线程跑10000次，发现tomcat的吞吐量没有超过2000</p><p>然后，我们换成undertow容器，修改pom.xml:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;</span><br><span class="line">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;groupId&gt;com.lisl&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;xnspringboot&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line"></span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;2.1.3.RELEASE&lt;/version&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">            &lt;exclusions&gt;</span><br><span class="line">                &lt;exclusion&gt;</span><br><span class="line">                    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">                    &lt;artifactId&gt;spring-boot-starter-tomcat&lt;/artifactId&gt;</span><br><span class="line">                &lt;/exclusion&gt;</span><br><span class="line">            &lt;/exclusions&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-undertow&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><p>一样用之前的测试进行测试，发现undertow容器的吞吐量有超过2000的，可以看出性能还是提升比较明显的。</p><h2 id="多数据源与jta-atomikos分布式事务"><a href="#多数据源与jta-atomikos分布式事务" class="headerlink" title="多数据源与jta+atomikos分布式事务"></a>多数据源与jta+atomikos分布式事务</h2><p>新建springboot项目：</p><p><strong>第一步：创建两个数据库</strong></p><p>1.spingboot</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `user` (</span><br><span class="line">`id`  int NOT NULL AUTO_INCREMENT ,</span><br><span class="line">`passwd`  varchar(255) NULL ,</span><br><span class="line">`username`  varchar(255) NULL ,</span><br><span class="line">PRIMARY KEY (`id`)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><ol start="2"><li>spring</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `order` (</span><br><span class="line">`id`  int(10) NOT NULL AUTO_INCREMENT ,</span><br><span class="line">`name`  varchar(255)  ,</span><br><span class="line">`user_id`  int(11) NOT NULL ,</span><br><span class="line">`account`  int(255) NULL DEFAULT NULL ,</span><br><span class="line">PRIMARY KEY (`id`)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>如上述，新建了两个数据库spingboot和spring，spingboot有一个user表，spring数据库中有一个order表。</p><p>第二步：生产相关mapper和model等。</p><p>1.修改pom.xml,引入mybatis依赖：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;2.1.3.RELEASE&lt;/version&gt;</span><br><span class="line">        &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line">    &lt;groupId&gt;com.lisl&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;atomikospringboot&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    &lt;name&gt;atomikospringboot&lt;/name&gt;</span><br><span class="line">    &lt;description&gt;Demo project for Spring Boot&lt;/description&gt;</span><br><span class="line"></span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;java.version&gt;1.8&lt;/java.version&gt;</span><br><span class="line">    &lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">            &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.3.0&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.mybatis.generator&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;mybatis-generator-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">                &lt;configuration&gt;</span><br><span class="line">                    &lt;overwrite&gt;true&lt;/overwrite&gt;</span><br><span class="line">                &lt;/configuration&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line">        &lt;/plugins&gt;</span><br><span class="line">    &lt;/build&gt;</span><br><span class="line"></span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>生成model、mapper和dao。如下所示</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">com</span><br><span class="line"> +- ccsu</span><br><span class="line">     +- App.java</span><br><span class="line">     |</span><br><span class="line">     +- service</span><br><span class="line">     |   +-impl</span><br><span class="line">     |      +- OrderServiceImpl.java</span><br><span class="line">     |   +- IOrderService.java</span><br><span class="line">     |</span><br><span class="line">     +- dao</span><br><span class="line">     |    +-user</span><br><span class="line">     |      +- UserMapper.java</span><br><span class="line">     |    +-order</span><br><span class="line">     |      +- OrderMapper.java</span><br><span class="line">     |</span><br><span class="line">     +- model</span><br><span class="line">     |  +- user</span><br><span class="line">     |     +- User.java</span><br><span class="line">     |  +- order</span><br><span class="line">     |     +- Order.java</span><br><span class="line">     </span><br><span class="line">......</span><br><span class="line">resouces</span><br><span class="line">  +- mapping</span><br><span class="line">     +- user</span><br><span class="line">     |  +- UserMapper.xml</span><br><span class="line">     |</span><br><span class="line">     +- Order</span><br><span class="line">     |  +- OrderMapper.xml</span><br></pre></td></tr></table></figure><p>为了区分，分别创建user、order目录，存放相应的数据。</p><p>3.配置两个数据源，修改application.properties:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">spring.datasource.spring.driverClassName=com.mysql.jdbc.Driver</span><br><span class="line">spring.datasource.spring.jdbcUrl=jdbc:mysql://localhost:3306/spingboot?serverTimezone=GMT%2B8</span><br><span class="line">spring.datasource.spring.username=root</span><br><span class="line">spring.datasource.spring.password=password</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">spring.datasource.spring2.driverClassName=com.mysql.jdbc.Driver</span><br><span class="line">spring.datasource.spring2.jdbcUrl=jdbc:mysql://localhost:3306/spring?serverTimezone=GMT%2B8</span><br><span class="line">spring.datasource.spring2.username=root</span><br><span class="line">spring.datasource.spring2.password=password</span><br></pre></td></tr></table></figure><p>4.新建IOrderService.java接口，以及实现类OrderServiceImpl.java:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">package com.ccsu.service.impl;</span><br><span class="line"></span><br><span class="line">import com.ccsu.dao.order.OrderMapper;</span><br><span class="line">import com.ccsu.dao.user.UserMapper;</span><br><span class="line">import com.ccsu.model.order.Order;</span><br><span class="line">import com.ccsu.model.user.User;</span><br><span class="line">import com.ccsu.service.IOrderService;</span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line">import org.springframework.transaction.annotation.Transactional;</span><br><span class="line"></span><br><span class="line">import javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line">@Service</span><br><span class="line">public class OrderServiceImpl implements IOrderService &#123;</span><br><span class="line"></span><br><span class="line">    @Resource</span><br><span class="line">    private OrderMapper orderMapper;</span><br><span class="line"></span><br><span class="line">    @Resource</span><br><span class="line">    private UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void addOrder(Order order, User user) &#123;</span><br><span class="line">        userMapper.insertSelective(user);</span><br><span class="line">        orderMapper.insertSelective(order);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.新建配置类，配置数据源：</p><p>DataSource1Config.java、DataSource2Config.java</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">package com.ccsu.config;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import com.mysql.cj.jdbc.MysqlXADataSource;</span><br><span class="line">import org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line">import org.mybatis.spring.SqlSessionFactoryBean;</span><br><span class="line">import org.mybatis.spring.SqlSessionTemplate;</span><br><span class="line">import org.mybatis.spring.annotation.MapperScan;</span><br><span class="line">import org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line">import org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line">import org.springframework.boot.jdbc.DataSourceBuilder;</span><br><span class="line">import org.springframework.boot.jta.atomikos.AtomikosDataSourceBean;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import org.springframework.context.annotation.Primary;</span><br><span class="line">import org.springframework.core.io.support.PathMatchingResourcePatternResolver;</span><br><span class="line">import org.springframework.jdbc.datasource.DataSourceTransactionManager;</span><br><span class="line"></span><br><span class="line">import javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line">@Configuration</span><br><span class="line">@MapperScan(basePackages = &quot;com.ccsu.dao.user&quot;, sqlSessionFactoryRef = &quot;test1SqlSessionFactory&quot;)</span><br><span class="line">public class DataSource1Config &#123;</span><br><span class="line"></span><br><span class="line">    @Bean(name = &quot;test1DataSource&quot;)</span><br><span class="line">    @ConfigurationProperties(prefix = &quot;spring.datasource.spring&quot;)</span><br><span class="line">    public DataSource testDataSource() &#123;</span><br><span class="line">        return DataSourceBuilder.create().build();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Bean(name = &quot;test1TransactionManager&quot;)</span><br><span class="line">    @Primary</span><br><span class="line">    public DataSourceTransactionManager testTransactionManager(@Qualifier(&quot;test1DataSource&quot;)DataSource dataSource)&#123;</span><br><span class="line">        return new DataSourceTransactionManager(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Bean(name = &quot;test1SqlSessionFactory&quot;)</span><br><span class="line">    @Primary</span><br><span class="line">    public SqlSessionFactory testSqlSessionFactory(@Qualifier(&quot;test1DataSource&quot;) DataSource dataSource)</span><br><span class="line">            throws Exception &#123;</span><br><span class="line">        SqlSessionFactoryBean bean = new SqlSessionFactoryBean();</span><br><span class="line">        bean.setDataSource(dataSource);</span><br><span class="line">        bean.setMapperLocations(new PathMatchingResourcePatternResolver().getResources(&quot;classpath:mapping/user/*.xml&quot;));</span><br><span class="line">        return bean.getObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Bean(name = &quot;test1SqlSessionTemplate&quot;)</span><br><span class="line">    @Primary</span><br><span class="line">    public SqlSessionTemplate testSqlSessionTemplate(</span><br><span class="line">            @Qualifier(&quot;test1SqlSessionFactory&quot;) SqlSessionFactory sqlSessionFactory) throws Exception &#123;</span><br><span class="line">        return new SqlSessionTemplate(sqlSessionFactory);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">package com.ccsu.config;</span><br><span class="line"></span><br><span class="line">import com.mysql.cj.jdbc.MysqlXADataSource;</span><br><span class="line">import org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line">import org.mybatis.spring.SqlSessionFactoryBean;</span><br><span class="line">import org.mybatis.spring.SqlSessionTemplate;</span><br><span class="line">import org.mybatis.spring.annotation.MapperScan;</span><br><span class="line">import org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line">import org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line">import org.springframework.boot.jdbc.DataSourceBuilder;</span><br><span class="line">import org.springframework.boot.jta.atomikos.AtomikosDataSourceBean;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import org.springframework.context.annotation.Primary;</span><br><span class="line">import org.springframework.core.io.support.PathMatchingResourcePatternResolver;</span><br><span class="line">import org.springframework.jdbc.datasource.DataSourceTransactionManager;</span><br><span class="line"></span><br><span class="line">import javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line">@Configuration</span><br><span class="line">@MapperScan(basePackages = &quot;com.ccsu.dao.order&quot;, sqlSessionFactoryRef = &quot;test2SqlSessionFactory&quot;)</span><br><span class="line">public class DataSource2Config &#123;</span><br><span class="line"></span><br><span class="line">    @Bean(name = &quot;test2DataSource&quot;)</span><br><span class="line">    @ConfigurationProperties(prefix = &quot;spring.datasource.spring2&quot;)</span><br><span class="line">    public DataSource testDataSource() &#123;</span><br><span class="line">        return DataSourceBuilder.create().build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Bean(name = &quot;test2TransactionManager&quot;)</span><br><span class="line">    public DataSourceTransactionManager testTransactionManager(@Qualifier(&quot;test2DataSource&quot;)DataSource dataSource)&#123;</span><br><span class="line">        return new DataSourceTransactionManager(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Bean(name = &quot;test2SqlSessionFactory&quot;)</span><br><span class="line">    public SqlSessionFactory testSqlSessionFactory(@Qualifier(&quot;test2DataSource&quot;) DataSource dataSource)</span><br><span class="line">            throws Exception &#123;</span><br><span class="line">        SqlSessionFactoryBean bean = new SqlSessionFactoryBean();</span><br><span class="line">        bean.setDataSource(dataSource);</span><br><span class="line">        bean.setMapperLocations(new PathMatchingResourcePatternResolver().getResources(&quot;classpath:mapping/order/*.xml&quot;));</span><br><span class="line">        return bean.getObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Bean(name = &quot;test2SqlSessionTemplate&quot;)</span><br><span class="line">    public SqlSessionTemplate testSqlSessionTemplate(</span><br><span class="line">            @Qualifier(&quot;test2SqlSessionFactory&quot;) SqlSessionFactory sqlSessionFactory) throws Exception &#123;</span><br><span class="line">        return new SqlSessionTemplate(sqlSessionFactory);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这两个配置文件是重中之重，配置了数据源，连接工厂，Mapper扫描的包， mapper xml配置的位置等</p><p>5.新建单元测试进行测试：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">package atomikospringboot;</span><br><span class="line"></span><br><span class="line">import com.ccsu.AtomikospringbootApplication;</span><br><span class="line">import com.ccsu.model.order.Order;</span><br><span class="line">import com.ccsu.model.user.User;</span><br><span class="line">import com.ccsu.service.IOrderService;</span><br><span class="line">import org.junit.Test;</span><br><span class="line">import org.junit.runner.RunWith;</span><br><span class="line">import org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line">import org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line">import javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line">@RunWith(SpringRunner.class)</span><br><span class="line">@SpringBootTest(classes = AtomikospringbootApplication.class)</span><br><span class="line">public class AtomikospringbootApplicationTests &#123;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void contextLoads() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Resource</span><br><span class="line">    private IOrderService iOrderService;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void testOrderAdd()&#123;</span><br><span class="line">        User user = new User();</span><br><span class="line">        user.setId(1);</span><br><span class="line">        user.setPasswd(&quot;test111&quot;);</span><br><span class="line">        user.setUsername(&quot;testUser&quot;);</span><br><span class="line"></span><br><span class="line">        Order order = new Order();</span><br><span class="line">        order.setUserId(1);</span><br><span class="line">        order.setName(&quot;testOrder&quot;);</span><br><span class="line">        order.setAccount(100);</span><br><span class="line"></span><br><span class="line">        iOrderService.addOrder(order, user);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行可以发现，已经配置了数据源。</p><p>现在修改OrderServiceImpl.java，让其发生事务问题。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">@Transactional</span><br><span class="line">public void addOrder(Order order, User user) &#123;</span><br><span class="line">    userMapper.insertSelective(user);</span><br><span class="line">    int i = 10/0;</span><br><span class="line">    orderMapper.insertSelective(order);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们会发现，即使使用了注解@Transactional，事务问题还是发生了，即：user插入了数据，order没插入数据。我们需要的是，发生异常，应该是都不插入数据才是解决事务问题。</p><p>所以，我们需要使用jta+atomikos分布式事务：</p><ol><li>修改pom.xml,添加依赖：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-jta-atomikos&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.1.2.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>新增配置类，DBConfig1.java、DBConfig2.java</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">package com.ccsu.config;</span><br><span class="line"></span><br><span class="line">import org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">@ConfigurationProperties(prefix = &quot;spring.datasource.spring&quot;)</span><br><span class="line">@Component</span><br><span class="line">public class DBConfig1 &#123;</span><br><span class="line">    private  String driverClassName;</span><br><span class="line">    private String jdbcUrl;</span><br><span class="line">    private String username;</span><br><span class="line">    private String password;</span><br><span class="line"></span><br><span class="line">    public String getDriverClassName() &#123;</span><br><span class="line">        return driverClassName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setDriverClassName(String driverClassName) &#123;</span><br><span class="line">        this.driverClassName = driverClassName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getJdbcUrl() &#123;</span><br><span class="line">        return jdbcUrl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setJdbcUrl(String jdbcUrl) &#123;</span><br><span class="line">        this.jdbcUrl = jdbcUrl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getUsername() &#123;</span><br><span class="line">        return username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setUsername(String username) &#123;</span><br><span class="line">        this.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getPassword() &#123;</span><br><span class="line">        return password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setPassword(String password) &#123;</span><br><span class="line">        this.password = password;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">package com.ccsu.config;</span><br><span class="line"></span><br><span class="line">import org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">@ConfigurationProperties(prefix = &quot;spring.datasource.spring2&quot;)</span><br><span class="line">@Component</span><br><span class="line">public class DBConfig2 &#123;</span><br><span class="line"></span><br><span class="line">    private  String driverClassName;</span><br><span class="line">    private String jdbcUrl;</span><br><span class="line">    private String username;</span><br><span class="line">    private String password;</span><br><span class="line"></span><br><span class="line">    public String getDriverClassName() &#123;</span><br><span class="line">        return driverClassName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setDriverClassName(String driverClassName) &#123;</span><br><span class="line">        this.driverClassName = driverClassName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getJdbcUrl() &#123;</span><br><span class="line">        return jdbcUrl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setJdbcUrl(String jdbcUrl) &#123;</span><br><span class="line">        this.jdbcUrl = jdbcUrl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getUsername() &#123;</span><br><span class="line">        return username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setUsername(String username) &#123;</span><br><span class="line">        this.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getPassword() &#123;</span><br><span class="line">        return password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setPassword(String password) &#123;</span><br><span class="line">        this.password = password;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>修改数据源配置类，使用全局数据源，XADataSource</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">package com.ccsu.config;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import com.mysql.cj.jdbc.MysqlXADataSource;</span><br><span class="line">import org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line">import org.mybatis.spring.SqlSessionFactoryBean;</span><br><span class="line">import org.mybatis.spring.SqlSessionTemplate;</span><br><span class="line">import org.mybatis.spring.annotation.MapperScan;</span><br><span class="line">import org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line">import org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line">import org.springframework.boot.jdbc.DataSourceBuilder;</span><br><span class="line">import org.springframework.boot.jta.atomikos.AtomikosDataSourceBean;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import org.springframework.context.annotation.Primary;</span><br><span class="line">import org.springframework.core.io.support.PathMatchingResourcePatternResolver;</span><br><span class="line">import org.springframework.jdbc.datasource.DataSourceTransactionManager;</span><br><span class="line"></span><br><span class="line">import javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line">@Configuration</span><br><span class="line">@MapperScan(basePackages = &quot;com.ccsu.dao.user&quot;, sqlSessionFactoryRef = &quot;test1SqlSessionFactory&quot;)</span><br><span class="line">public class DataSource1Config &#123;</span><br><span class="line"></span><br><span class="line">//    @Bean(name = &quot;test1DataSource&quot;)</span><br><span class="line">//    @ConfigurationProperties(prefix = &quot;spring.datasource.spring&quot;)</span><br><span class="line">//    public DataSource testDataSource() &#123;</span><br><span class="line">//        return DataSourceBuilder.create().build();</span><br><span class="line">//    &#125;</span><br><span class="line"></span><br><span class="line">    @Bean(name = &quot;test1DataSource&quot;)</span><br><span class="line">    @Primary</span><br><span class="line">    public DataSource testDataSource(DBConfig1 config1) &#123;</span><br><span class="line">        MysqlXADataSource mysqlXADataSource = new MysqlXADataSource();</span><br><span class="line">        mysqlXADataSource.setUrl(config1.getJdbcUrl());</span><br><span class="line">        mysqlXADataSource.setPassword(config1.getPassword());</span><br><span class="line">        mysqlXADataSource.setUser(config1.getUsername());</span><br><span class="line"></span><br><span class="line">        AtomikosDataSourceBean atomikosDataSourceBean = new AtomikosDataSourceBean();</span><br><span class="line">        atomikosDataSourceBean.setXaDataSource(mysqlXADataSource);</span><br><span class="line">        atomikosDataSourceBean.setUniqueResourceName(&quot;test1Datasource&quot;);</span><br><span class="line">        return atomikosDataSourceBean;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Bean(name = &quot;test1TransactionManager&quot;)</span><br><span class="line">    @Primary</span><br><span class="line">    public DataSourceTransactionManager testTransactionManager(@Qualifier(&quot;test1DataSource&quot;)DataSource dataSource)&#123;</span><br><span class="line">        return new DataSourceTransactionManager(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Bean(name = &quot;test1SqlSessionFactory&quot;)</span><br><span class="line">    @Primary</span><br><span class="line">    public SqlSessionFactory testSqlSessionFactory(@Qualifier(&quot;test1DataSource&quot;) DataSource dataSource)</span><br><span class="line">            throws Exception &#123;</span><br><span class="line">        SqlSessionFactoryBean bean = new SqlSessionFactoryBean();</span><br><span class="line">        bean.setDataSource(dataSource);</span><br><span class="line">        bean.setMapperLocations(new PathMatchingResourcePatternResolver().getResources(&quot;classpath:mapping/user/*.xml&quot;));</span><br><span class="line">        return bean.getObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Bean(name = &quot;test1SqlSessionTemplate&quot;)</span><br><span class="line">    @Primary</span><br><span class="line">    public SqlSessionTemplate testSqlSessionTemplate(</span><br><span class="line">            @Qualifier(&quot;test1SqlSessionFactory&quot;) SqlSessionFactory sqlSessionFactory) throws Exception &#123;</span><br><span class="line">        return new SqlSessionTemplate(sqlSessionFactory);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">package com.ccsu.config;</span><br><span class="line"></span><br><span class="line">import com.mysql.cj.jdbc.MysqlXADataSource;</span><br><span class="line">import org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line">import org.mybatis.spring.SqlSessionFactoryBean;</span><br><span class="line">import org.mybatis.spring.SqlSessionTemplate;</span><br><span class="line">import org.mybatis.spring.annotation.MapperScan;</span><br><span class="line">import org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line">import org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line">import org.springframework.boot.jdbc.DataSourceBuilder;</span><br><span class="line">import org.springframework.boot.jta.atomikos.AtomikosDataSourceBean;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import org.springframework.context.annotation.Primary;</span><br><span class="line">import org.springframework.core.io.support.PathMatchingResourcePatternResolver;</span><br><span class="line">import org.springframework.jdbc.datasource.DataSourceTransactionManager;</span><br><span class="line"></span><br><span class="line">import javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line">@Configuration</span><br><span class="line">@MapperScan(basePackages = &quot;com.ccsu.dao.order&quot;, sqlSessionFactoryRef = &quot;test2SqlSessionFactory&quot;)</span><br><span class="line">public class DataSource2Config &#123;</span><br><span class="line"></span><br><span class="line">//    @Bean(name = &quot;test2DataSource&quot;)</span><br><span class="line">//    @ConfigurationProperties(prefix = &quot;spring.datasource.spring2&quot;)</span><br><span class="line">//    public DataSource testDataSource() &#123;</span><br><span class="line">//        return DataSourceBuilder.create().build();</span><br><span class="line">//    &#125;</span><br><span class="line"></span><br><span class="line">    @Bean(name = &quot;test2DataSource&quot;)</span><br><span class="line">    public DataSource testDataSource(DBConfig2 dbConfig2) &#123;</span><br><span class="line">        MysqlXADataSource mysqlXADataSource=new MysqlXADataSource();</span><br><span class="line">        mysqlXADataSource.setUrl(dbConfig2.getJdbcUrl());</span><br><span class="line">        mysqlXADataSource.setPassword(dbConfig2.getPassword());</span><br><span class="line">        mysqlXADataSource.setUser(dbConfig2.getUsername());</span><br><span class="line"></span><br><span class="line">        AtomikosDataSourceBean atomikosDataSourceBean=new AtomikosDataSourceBean();</span><br><span class="line">        atomikosDataSourceBean.setXaDataSource(mysqlXADataSource);</span><br><span class="line">        atomikosDataSourceBean.setUniqueResourceName(&quot;test2Datasource&quot;);</span><br><span class="line">        return atomikosDataSourceBean;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Bean(name = &quot;test2TransactionManager&quot;)</span><br><span class="line">    public DataSourceTransactionManager testTransactionManager(@Qualifier(&quot;test2DataSource&quot;)DataSource dataSource)&#123;</span><br><span class="line">        return new DataSourceTransactionManager(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Bean(name = &quot;test2SqlSessionFactory&quot;)</span><br><span class="line">    public SqlSessionFactory testSqlSessionFactory(@Qualifier(&quot;test2DataSource&quot;) DataSource dataSource)</span><br><span class="line">            throws Exception &#123;</span><br><span class="line">        SqlSessionFactoryBean bean = new SqlSessionFactoryBean();</span><br><span class="line">        bean.setDataSource(dataSource);</span><br><span class="line">        bean.setMapperLocations(new PathMatchingResourcePatternResolver().getResources(&quot;classpath:mapping/order/*.xml&quot;));</span><br><span class="line">        return bean.getObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Bean(name = &quot;test2SqlSessionTemplate&quot;)</span><br><span class="line">    public SqlSessionTemplate testSqlSessionTemplate(</span><br><span class="line">            @Qualifier(&quot;test2SqlSessionFactory&quot;) SqlSessionFactory sqlSessionFactory) throws Exception &#123;</span><br><span class="line">        return new SqlSessionTemplate(sqlSessionFactory);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>修改OrderServiceImpl.java,加入注解：@Transactional</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">@Transactional</span><br><span class="line">public void addOrder(Order order, User user) &#123;</span><br><span class="line">    userMapper.insertSelective(user);</span><br><span class="line">    int i = 10/0;</span><br><span class="line">    orderMapper.insertSelective(order);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再次，运行单元测试，发现事务问题已经得到解决。</p><h2 id="SpringBoot源码分析"><a href="#SpringBoot源码分析" class="headerlink" title="SpringBoot源码分析"></a>SpringBoot源码分析</h2><p>对于SpringBoot, 我们有意思的是他可以直接main方法启动，以前我们通常的web项目，都是需要在web容器才能启动。为什么SpingBoot可以直接启动呢？</p><p>是因为SpringBoot使用了内嵌的Tomcat,还有就是他对springmvc进行了无缝整合。</p><p><strong>内嵌Tomcat</strong></p><p>新建项目，修改pom.xml,引入内嵌tomcat:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;</span><br><span class="line">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;groupId&gt;com.lisl&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;embedtomcat&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.tomcat.embed&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;tomcat-embed-core&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;8.5.16&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.tomcat&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;tomcat-jasper&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;8.5.16&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><p>新建servlet:</p><p>IndexServlet.java:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">package com.lisl.servlet;</span><br><span class="line"></span><br><span class="line">import javax.servlet.ServletException;</span><br><span class="line">import javax.servlet.http.HttpServlet;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">public class IndexServlet extends HttpServlet &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class="line">        doPost(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class="line">        resp.getWriter().print(&quot;this is index.. tomcat&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>操作Tomcat:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">package com.lisl.tomcat;</span><br><span class="line"></span><br><span class="line">import com.lisl.servlet.IndexServlet;</span><br><span class="line">import org.apache.catalina.LifecycleException;</span><br><span class="line">import org.apache.catalina.core.StandardContext;</span><br><span class="line">import org.apache.catalina.startup.Tomcat;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class TestEmbedTomcat &#123;</span><br><span class="line"></span><br><span class="line">    private static  int PORT = 8080;</span><br><span class="line"></span><br><span class="line">    private static  String CONTEXT_PATH=&quot;/lisl&quot;;</span><br><span class="line"></span><br><span class="line">    private static  String SERVLET_NAME = &quot;indexServlet&quot;;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws LifecycleException &#123;</span><br><span class="line">        /*创建tomcat服务器*/</span><br><span class="line">        Tomcat tomcat = new Tomcat();</span><br><span class="line">        /*指定端口*/</span><br><span class="line">        tomcat.setPort(PORT);</span><br><span class="line">        /*是否设置自动部署*/</span><br><span class="line">        tomcat.getHost().setAutoDeploy(false);</span><br><span class="line">        /*创建上下文*/</span><br><span class="line">        StandardContext standardContext = new StandardContext();</span><br><span class="line">        standardContext.setPath(CONTEXT_PATH);</span><br><span class="line">        /*监听上下文*/</span><br><span class="line">        standardContext.addLifecycleListener(new Tomcat.FixContextListener());</span><br><span class="line">        /*tomcat添加standardContext*/</span><br><span class="line">        tomcat.getHost().addChild(standardContext);</span><br><span class="line"></span><br><span class="line">        /*创建servlet*/</span><br><span class="line">        tomcat.addServlet(CONTEXT_PATH, SERVLET_NAME, new IndexServlet());</span><br><span class="line">        /*servleturl映射*/</span><br><span class="line">        standardContext.addServletMappingDecoded(&quot;/index&quot;, SERVLET_NAME);</span><br><span class="line">        /*启动tomcat*/</span><br><span class="line">        tomcat.start();</span><br><span class="line">        System.out.println(&quot;tomcat服务器已启动！&quot;);</span><br><span class="line">        /*异步进行接收请求*/</span><br><span class="line">        tomcat.getServer().await();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行main函数,在浏览器输入：</p><p><a href="http://localhost:8080/lisl/index" target="_blank" rel="noopener">http://localhost:8080/lisl/index</a></p><p>可以看到结果，说明内嵌Tomcat成功。</p><p><strong>SpringMVC整合</strong></p><p>修改pom.xml,加入springMvc依赖：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-web&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;5.1.5.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;5.1.5.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>新增service:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">package com.lisl.service;</span><br><span class="line"></span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line">@Service</span><br><span class="line">public class UserService &#123;</span><br><span class="line"></span><br><span class="line">    public String index()&#123;</span><br><span class="line">        return &quot;springboot 2.0  我正在加载UserService&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新建RestController</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">public class IndexController &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private UserService userService;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(value = &quot;/index&quot;, produces = &quot;text/html;charset=UTF-8&quot;)</span><br><span class="line">    public String index()&#123;</span><br><span class="line">        return userService.index();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>常用业务类已经准备完毕，接下来就是真正的整合了。</p><p>DispatcherServlet配置类</p><p>虽然前面有了service,有了controller,但依然没有把这些组建交给spring,对于springmvc来说，有个DispatcherServlet，这是springmvc的前端控制器，以前是配置在web.xml中。只是现在用的是注解。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">package com.lisl.config;</span><br><span class="line"></span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import org.springframework.web.servlet.support.AbstractAnnotationConfigDispatcherServletInitializer;</span><br><span class="line"></span><br><span class="line">@Configuration</span><br><span class="line">public class SpringWebAppInitializer extends AbstractAnnotationConfigDispatcherServletInitializer &#123;</span><br><span class="line"></span><br><span class="line">    // 加载根配置信息 spring核心</span><br><span class="line">    protected Class&lt;?&gt;[] getRootConfigClasses() &#123;</span><br><span class="line">        return new Class[] &#123; RootConfig.class &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // springmvc 加载 配置信息</span><br><span class="line">    protected Class&lt;?&gt;[] getServletConfigClasses() &#123;</span><br><span class="line">        return new Class[] &#123; WebConfig.class &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // springmvc 拦截url映射 拦截所有请求</span><br><span class="line">    protected String[] getServletMappings() &#123;</span><br><span class="line">        return new String[] &#123; &quot;/&quot; &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新建RootConfig.java:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">package com.lisl.config;</span><br><span class="line"></span><br><span class="line">import org.springframework.context.annotation.ComponentScan;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line">@Configuration</span><br><span class="line">@ComponentScan(&quot;com.lisl&quot;)</span><br><span class="line">public class RootConfig &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新建WebConfig.java:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">package com.lisl.config;</span><br><span class="line"></span><br><span class="line">import org.springframework.context.annotation.ComponentScan;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import org.springframework.web.servlet.config.annotation.EnableWebMvc;</span><br><span class="line">import org.springframework.web.servlet.config.annotation.ViewResolverRegistry;</span><br><span class="line">import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line">import org.springframework.web.servlet.view.InternalResourceViewResolver;</span><br><span class="line"></span><br><span class="line">@Configuration</span><br><span class="line">@EnableWebMvc</span><br><span class="line">@ComponentScan(basePackages = &#123;&quot;com.lisl.controller&quot;&#125;)</span><br><span class="line">public class WebConfig implements WebMvcConfigurer &#123;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>集成tomcat,跟之前一样，启动tomcat:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">package com.lisl;</span><br><span class="line"></span><br><span class="line">import org.apache.catalina.LifecycleException;</span><br><span class="line">import org.apache.catalina.WebResourceRoot;</span><br><span class="line">import org.apache.catalina.core.StandardContext;</span><br><span class="line">import org.apache.catalina.startup.Tomcat;</span><br><span class="line">import org.apache.catalina.webresources.DirResourceSet;</span><br><span class="line">import org.apache.catalina.webresources.StandardRoot;</span><br><span class="line"></span><br><span class="line">import javax.servlet.ServletException;</span><br><span class="line">import java.io.File;</span><br><span class="line"></span><br><span class="line">public class TomcatApp &#123;</span><br><span class="line">    public static void main(String[] args) throws ServletException, LifecycleException &#123;</span><br><span class="line">        start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void start() throws ServletException, LifecycleException &#123;</span><br><span class="line">        /*创建tomcat*/</span><br><span class="line">        Tomcat tomcat = new Tomcat();</span><br><span class="line">        /*设置端口*/</span><br><span class="line">        tomcat.setPort(8090);</span><br><span class="line">        /*读取项目路径 加载静态资源*/</span><br><span class="line">        StandardContext standardContext = (StandardContext) tomcat.addWebapp(&quot;/&quot;, new File(&quot;embedtomcat/src/main&quot;).getAbsolutePath());</span><br><span class="line"></span><br><span class="line">        /*禁止重新载入*/</span><br><span class="line">        standardContext.setReloadable(false);</span><br><span class="line"></span><br><span class="line">        // class文件读取地址</span><br><span class="line">        File file = new File(&quot;target/classes&quot;);</span><br><span class="line"></span><br><span class="line">        // 创建WebRoot</span><br><span class="line">        WebResourceRoot resourceRoot = new StandardRoot(standardContext);</span><br><span class="line"></span><br><span class="line">        // tomcat内部读取Class执行</span><br><span class="line">        resourceRoot.addPreResources(new DirResourceSet(resourceRoot, &quot;/WEB-INF/classes&quot;, file.getAbsolutePath(), &quot;/&quot;));</span><br><span class="line"></span><br><span class="line">        tomcat.start();</span><br><span class="line"></span><br><span class="line">        // 异步等待请求执行</span><br><span class="line">        tomcat.getServer().await();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动，在地址栏输入：</p><p><a href="http://localhost:8090/index" target="_blank" rel="noopener">http://localhost:8090/index</a>;</p><p>便可以看到结果。</p><p><strong>对JSP支持</strong></p><p>要支持JSP，回忆学习springmvc中的内容，需要用到一个试图解析器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">package com.lisl.config;</span><br><span class="line"></span><br><span class="line">import org.springframework.context.annotation.ComponentScan;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import org.springframework.web.servlet.config.annotation.EnableWebMvc;</span><br><span class="line">import org.springframework.web.servlet.config.annotation.ViewResolverRegistry;</span><br><span class="line">import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line">import org.springframework.web.servlet.view.InternalResourceViewResolver;</span><br><span class="line"></span><br><span class="line">@Configuration</span><br><span class="line">@EnableWebMvc</span><br><span class="line">@ComponentScan(basePackages = &#123;&quot;com.lisl.controller&quot;&#125;)</span><br><span class="line">public class WebConfig implements WebMvcConfigurer &#123;</span><br><span class="line">    // 创建SpringMVC视图解析器</span><br><span class="line">    public void configureViewResolvers(ViewResolverRegistry registry) &#123;</span><br><span class="line">        InternalResourceViewResolver viewResolver = new InternalResourceViewResolver();</span><br><span class="line">        viewResolver.setPrefix(&quot;/WEB-INF/views/&quot;);</span><br><span class="line">        viewResolver.setSuffix(&quot;.jsp&quot;);</span><br><span class="line">        // 可以在JSP页面中通过$&#123;&#125;访问beans</span><br><span class="line">        viewResolver.setExposeContextBeansAsAttributes(true);</span><br><span class="line"></span><br><span class="line">        registry.viewResolver(viewResolver);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新增contrller:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">package com.lisl.controller;</span><br><span class="line"></span><br><span class="line">import org.springframework.stereotype.Controller;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line">@Controller</span><br><span class="line">public class UserController &#123;</span><br><span class="line">    </span><br><span class="line">    @RequestMapping(&quot;/pageIndex&quot;)</span><br><span class="line">    public String pageIndex() &#123;</span><br><span class="line">        return &quot;pageIndex&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>增加jsp:</p><p>在resources里面新增WEB-INF\views\pageIndex.jsp</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;</span><br><span class="line">         pageEncoding=&quot;UTF-8&quot;%&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;无敌&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;这是个jsp页面&lt;/h1&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>重启tomcat ，访问<a href="http://localhost:8090/pageIndex;即可看到结果。" target="_blank" rel="noopener">http://localhost:8090/pageIndex;即可看到结果。</a></p><p><strong>Tomcat加载流程</strong></p><p><strong>问题一:SpringBoot中tomcat在哪里加载，并启动的？</strong></p><p>首先，spring-boot-starter中，我们可以找到spring.factories</p><p>其中加载了这样一个类：</p><p>org.springframework.boot.autoconfigure.web.servlet.<strong>ServletWebServerFactoryAutoConfiguration</strong></p><p>点进去，可以看到，</p><p>ServletWebServerFactoryAutoConfiguration 这类里面有个<strong>TomcatServletWebServerFactoryCustomizer</strong>这个类实现了<strong>WebServerFactoryCustomizer</strong></p><p>这个里面引入了EmbeddedTomcat，然后一直点进去，发现是这样一个过程，最终在getWebServer()方法里，new了一个tomcat,并启动了tomcat。</p><p><strong>EmbeddedTomcat</strong>-&gt;</p><p><strong>TomcatServletWebServerFactory</strong>-&gt;</p><p><strong>TomcatServletWebServerFactory.getWebServer()</strong>-&gt;</p><p><strong>getTomcatWebServer</strong>-&gt;</p><p><strong>TomcatWebServer</strong>-&gt;<strong>启动tomcat</strong></p><p><strong>问题二：getWebServer()谁调用的？</strong></p><p>那么，我们其实是可以猜测，肯定是SpringBoot中main方法进行启动的。</p><p><strong>SpringBoot启动流程分析</strong></p><p>ApplicationContextInitializer   Context初始化后调用的类</p><p>SpringApplicationRunListener  SpringBoot运行监听的类</p><p>ApplicationRunner</p><p>CommandLineRunner </p><p>上面着这个几乎可以等价，用于启动后做客户自定义的操作</p><p>新建TestApplicationContextInitializer.java:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">package com.ccsu.listener;</span><br><span class="line"></span><br><span class="line">import org.springframework.context.ApplicationContextInitializer;</span><br><span class="line">import org.springframework.context.ConfigurableApplicationContext;</span><br><span class="line"></span><br><span class="line">public class TestApplicationContextInitializer implements ApplicationContextInitializer &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void initialize(ConfigurableApplicationContext applicationContext) &#123;</span><br><span class="line">        System.out.println(&quot;TestApplicationContextInitializer.initialize()执行了&quot; + applicationContext);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新建TestSpringApplicationRunListener.java:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">package com.ccsu.listener;</span><br><span class="line"></span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.SpringApplicationRunListener;</span><br><span class="line">import org.springframework.context.ConfigurableApplicationContext;</span><br><span class="line">import org.springframework.core.env.ConfigurableEnvironment;</span><br><span class="line"></span><br><span class="line">public class TestSpringApplicationRunListener implements SpringApplicationRunListener &#123;</span><br><span class="line"></span><br><span class="line">    /*必须有的构造器*/</span><br><span class="line">    public TestSpringApplicationRunListener(SpringApplication application, String[] args) &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void starting() &#123;</span><br><span class="line">        System.out.println(&quot;TestSpringApplicationRunListener.starting()执行了！&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void environmentPrepared(ConfigurableEnvironment environment) &#123;</span><br><span class="line">        System.out.println(&quot;TestSpringApplicationRunListener.environmentPrepared()执行了！&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void contextPrepared(ConfigurableApplicationContext context) &#123;</span><br><span class="line">        System.out.println(&quot;TestSpringApplicationRunListener.contextPrepared()执行了！&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void contextLoaded(ConfigurableApplicationContext context) &#123;</span><br><span class="line">        System.out.println(&quot;TestSpringApplicationRunListener.contextLoaded()执行了！&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void started(ConfigurableApplicationContext context) &#123;</span><br><span class="line">        System.out.println(&quot;TestSpringApplicationRunListener.started()执行了！&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void running(ConfigurableApplicationContext context) &#123;</span><br><span class="line">        System.out.println(&quot;TestSpringApplicationRunListener.running()执行了！&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void failed(ConfigurableApplicationContext context, Throwable exception) &#123;</span><br><span class="line">        System.out.println(&quot;TestSpringApplicationRunListener.failed()执行了！&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新建TestApplicationRunner.java:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">package com.ccsu.listener;</span><br><span class="line"></span><br><span class="line">import org.springframework.boot.ApplicationArguments;</span><br><span class="line">import org.springframework.boot.ApplicationRunner;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">@Component</span><br><span class="line">public class TestApplicationRunner implements ApplicationRunner &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void run(ApplicationArguments args) throws Exception &#123;</span><br><span class="line">        System.out.println(&quot;TestApplicationRunner.run()执行了&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新建TestCommandLineRunner.java:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">package com.ccsu.listener;</span><br><span class="line"></span><br><span class="line">import org.springframework.boot.CommandLineRunner;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">import java.util.Arrays;</span><br><span class="line"></span><br><span class="line">@Component</span><br><span class="line">public class TestCommandLineRunner implements CommandLineRunner &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void run(String... args) throws Exception &#123;</span><br><span class="line">        System.out.println(&quot;TestCommandLineRunner.run()执行了&quot;+ Arrays.asList(args));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>resources/META-INF/spring.factories增加：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.context.ApplicationContextInitializer=\</span><br><span class="line">com.ccsu.listener.TestApplicationContextInitializer</span><br><span class="line"></span><br><span class="line">org.springframework.boot.SpringApplicationRunListener=\</span><br><span class="line">com.ccsu.listener.TestSpringApplicationRunListener</span><br></pre></td></tr></table></figure><p>让SpringBoot能识别并加载。</p><p>运行SpringBoot项目，会发现在启动过程中，会打印我们新建的几个测试类的输出信息，说明在启动过程中加载以上的类并执行了方法。</p><p>接下来，跟着SpringBoot的启动类中的run方法，进去看看源码：</p><p>里面第一步新建了SpringApplication，源码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public static ConfigurableApplicationContext run(Class&lt;?&gt;[] primarySources,</span><br><span class="line">String[] args) &#123;</span><br><span class="line">return new SpringApplication(primarySources).run(args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实SpringBoot启动就这两个步骤，先创建ConfigurableApplicationContext ，然后再调用Run方法。</p><p>在这个SpringApplication里，会看到加载了ApplicationContextInitializer类，这是在初始化上下文。源码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public SpringApplication(ResourceLoader resourceLoader, Class&lt;?&gt;... primarySources) &#123;</span><br><span class="line">this.resourceLoader = resourceLoader;</span><br><span class="line">Assert.notNull(primarySources, &quot;PrimarySources must not be null&quot;);</span><br><span class="line">//保存主类</span><br><span class="line">this.primarySources = new LinkedHashSet&lt;&gt;(Arrays.asList(primarySources));</span><br><span class="line">//判断当前是什么类型项目</span><br><span class="line">this.webApplicationType = WebApplicationType.deduceFromClasspath();</span><br><span class="line">//从类路径下找到META-INF/spring.factories配置的所有ApplicationContextInitializer</span><br><span class="line">setInitializers((Collection) getSpringFactoriesInstances(</span><br><span class="line">ApplicationContextInitializer.class));</span><br><span class="line">//从类路径下找到META-INF/spring.factories配置的所有ApplicationListener</span><br><span class="line">setListeners((Collection) getSpringFactoriesInstances(ApplicationListener.class));</span><br><span class="line">this.mainApplicationClass = deduceMainApplicationClass();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可见这一步非常简单，只是把一些相关的类都加载了而已，并没执行。</p><p>然后我们再回到之前的，new SpringApplication(primarySources).run(args) 重要的是这个run方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">public ConfigurableApplicationContext run(String... args) &#123;</span><br><span class="line">StopWatch stopWatch = new StopWatch();</span><br><span class="line">stopWatch.start();</span><br><span class="line">ConfigurableApplicationContext context = null;</span><br><span class="line">Collection&lt;SpringBootExceptionReporter&gt; exceptionReporters = new ArrayList&lt;&gt;();</span><br><span class="line">configureHeadlessProperty();</span><br><span class="line">//从类路径下META‐INF/spring.factories，取得SpringApplicationRunListeners；</span><br><span class="line">SpringApplicationRunListeners listeners = getRunListeners(args);</span><br><span class="line">//回调所有的获取SpringApplicationRunListener.starting()方法</span><br><span class="line">listeners.starting();</span><br><span class="line">try &#123;</span><br><span class="line">    //封装命令行参数</span><br><span class="line">ApplicationArguments applicationArguments = new DefaultApplicationArguments(</span><br><span class="line">args);</span><br><span class="line">    //准备环境</span><br><span class="line">ConfigurableEnvironment environment = prepareEnvironment(listeners,</span><br><span class="line">applicationArguments);</span><br><span class="line">configureIgnoreBeanInfo(environment);</span><br><span class="line">            //创回调SpringApplicationRunListener.environmentPrepared()；</span><br><span class="line">//表示环境准备完成</span><br><span class="line"></span><br><span class="line">//打印Banner </span><br><span class="line">Banner printedBanner = printBanner(environment);</span><br><span class="line">            //根据环境创建context</span><br><span class="line">context = createApplicationContext();</span><br><span class="line">    //错误的异常报表</span><br><span class="line">exceptionReporters = getSpringFactoriesInstances(</span><br><span class="line">SpringBootExceptionReporter.class,</span><br><span class="line">new Class[] &#123; ConfigurableApplicationContext.class &#125;, context);</span><br><span class="line">     //准备上下文环境;</span><br><span class="line">//将environment保存到ioc中；</span><br><span class="line">//applyInitializers()调用所有的ApplicationContextInitializer的initialize方法</span><br><span class="line">//调用所有的SpringApplicationRunListener的contextPrepared()；</span><br><span class="line">prepareContext(context, environment, listeners, applicationArguments,</span><br><span class="line">printedBanner);</span><br><span class="line">//SpringApplicationRunListener的contextLoaded</span><br><span class="line">//刷新容器</span><br><span class="line">//扫描，创建，加载所有组件；</span><br><span class="line">refreshContext(context);</span><br><span class="line">afterRefresh(context, applicationArguments);</span><br><span class="line">stopWatch.stop();</span><br><span class="line">if (this.logStartupInfo) &#123;</span><br><span class="line">new StartupInfoLogger(this.mainApplicationClass)</span><br><span class="line">.logStarted(getApplicationLog(), stopWatch);</span><br><span class="line">&#125;</span><br><span class="line">//所有的SpringApplicationRunListener回调started方法</span><br><span class="line">listeners.started(context);</span><br><span class="line">//获取所有的ApplicationRunner和CommandLineRunner进行调用</span><br><span class="line">callRunners(context, applicationArguments);</span><br><span class="line">&#125;</span><br><span class="line">catch (Throwable ex) &#123;</span><br><span class="line">handleRunFailure(context, ex, exceptionReporters, listeners);</span><br><span class="line">throw new IllegalStateException(ex);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">try &#123;</span><br><span class="line">//所有的SpringApplicationRunListener的running()；</span><br><span class="line">listeners.running(context);</span><br><span class="line">&#125;</span><br><span class="line">catch (Throwable ex) &#123;</span><br><span class="line">handleRunFailure(context, ex, exceptionReporters, null);</span><br><span class="line">throw new IllegalStateException(ex);</span><br><span class="line">&#125;</span><br><span class="line">return context;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个run方法就可以看到，我们之前写的几个测试类，里面的方法都在这里调用了，这就是整个启动过程。</p><p>然后我们看看这里面的refreshContext()方法，点进去调用了refresh()</p><p>这个方法里源码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">protected void refresh(ApplicationContext applicationContext) &#123;</span><br><span class="line">Assert.isInstanceOf(AbstractApplicationContext.class, applicationContext);</span><br><span class="line">((AbstractApplicationContext) applicationContext).refresh();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>里面还调用了refresh(),在点进去，我们很熟悉的发现这是Spring的东西。</p><p>然后，我们看看里面的onRefresh();里面是空的，然后我们发现有很多子类实现了该方法，然后我们选择我们SpringBoot相关的子类实现的该方法(ps:我的版本是2.1.3,其他版本可能不同，只要看SpringBoot相关的子类实现即可)。</p><p>所以我们找到：</p><p>org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext#onRefresh</p><p>这个类下的实现；</p><p>里面有一个调用了createWebServer();</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">private void createWebServer() &#123;</span><br><span class="line">WebServer webServer = this.webServer;</span><br><span class="line">ServletContext servletContext = getServletContext();</span><br><span class="line">if (webServer == null &amp;&amp; servletContext == null) &#123;</span><br><span class="line">ServletWebServerFactory factory = getWebServerFactory();</span><br><span class="line">this.webServer = factory.getWebServer(getSelfInitializer());</span><br><span class="line">&#125;</span><br><span class="line">else if (servletContext != null) &#123;</span><br><span class="line">try &#123;</span><br><span class="line">getSelfInitializer().onStartup(servletContext);</span><br><span class="line">&#125;</span><br><span class="line">catch (ServletException ex) &#123;</span><br><span class="line">throw new ApplicationContextException(&quot;Cannot initialize servlet context&quot;,</span><br><span class="line">ex);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">initPropertySources();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们终于发现，这里调用了getWebServer()</p><p>即：this.webServer = factory.getWebServer(getSelfInitializer());这段代码。</p><p>到此，我们就可以理顺整个SpringBoot的整个启动流程。</p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> 框架 </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud框架</title>
      <link href="/2019/10/18/SpringCloud%E6%A1%86%E6%9E%B6/"/>
      <url>/2019/10/18/SpringCloud%E6%A1%86%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="RestFul简介"><a href="#RestFul简介" class="headerlink" title="RestFul简介"></a>RestFul简介</h2><p>RestFul是基于WebService演进而来</p><p>WebService的问题大概如下：</p><ul><li>由于使用的SOAP协议，使用WSDL，这本质上是使用的XML进行内容通信，速度太慢，处理的效率太低</li><li>如果想使用本地接口的方式调用，要利用开发工具根据WSDL文件生成很多工具代码，接口任何变动都回导致工具代码重新生成，开发特别繁琐</li></ul><p>在2005年的时候，又有一个新的概念产生，既SOA(面向服务架构)，他提出了一个服务总线(ESB)的概念。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">JAVA服务接口--&gt;ESB</span><br><span class="line">.NET服务接口--&gt;ESB</span><br><span class="line">C服务接口--&gt;ESB</span><br><span class="line">ESB--&gt;JAVA客户端</span><br><span class="line">ESB--&gt;PHP客户端</span><br></pre></td></tr></table></figure><p>这ESB类似于设计模式里面适配器模式，不管服务提供方是使用什么语音实现的，在他注册到消息总线里面，用过使用同样的一套规范，这样客户端调用就省事了很多。</p><p>所有的服务由服务总线通过管理，但这个消息总线其实只是一种思想，具体要要通过具体的RPC框架实现，说到RPC，其中最有代表意义的就是前面以及学习过的dubbo开发技术，他可以使用dubbo协议，或者RMI协议，在传输层是用netty。</p><p>除开耳熟能详的dubbo,成长比较快的是Rest协议，这其实就是因为JSON的广泛应用，如果说是XML技术成就了webservice，那么JSON就造就了Rest服务。</p><p>不过Rest还是一个未成型的标准，SpringCloud就真正讲Rest作为了RPC的实现技术，SpringCloud这技术以及成为了这行业的趋势，而且 SpringCloud 也依照于 SpringBoot<br>开发技术，可以实现项目的打包发布以及单独运行。</p>]]></content>
      
      
      <categories>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> 框架 </tag>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typora教程</title>
      <link href="/2019/10/18/Typora%E6%95%99%E7%A8%8B/"/>
      <url>/2019/10/18/Typora%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Typora-快捷键"><a href="#Typora-快捷键" class="headerlink" title="Typora 快捷键"></a>Typora 快捷键</h1><h6 id="1、标题"><a href="#1、标题" class="headerlink" title="1、标题"></a>1、标题</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctrl + 数字</span><br></pre></td></tr></table></figure><h6 id="２、下划线"><a href="#２、下划线" class="headerlink" title="２、下划线"></a>２、<u>下划线</u></h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctrl + u</span><br></pre></td></tr></table></figure><h6 id="３、删除线"><a href="#３、删除线" class="headerlink" title="３、删除线"></a>３、<del>删除线</del></h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alt 　+　shift + 5</span><br></pre></td></tr></table></figure><h6 id="4、字体加粗"><a href="#4、字体加粗" class="headerlink" title="4、字体加粗"></a>4、<strong>字体加粗</strong></h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctrl  +  b</span><br></pre></td></tr></table></figure><h6 id="5、字体倾斜"><a href="#5、字体倾斜" class="headerlink" title="5、字体倾斜*"></a>5、<em>字体倾斜*</em></h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctrl + i</span><br></pre></td></tr></table></figure><h6 id="6、无序列表"><a href="#6、无序列表" class="headerlink" title="6、无序列表"></a>6、无序列表</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- + space + enter</span><br></pre></td></tr></table></figure><h6 id="7、有序列表"><a href="#7、有序列表" class="headerlink" title="7、有序列表"></a>7、有序列表</h6><blockquote><p>数字键 + space + enter</p></blockquote><h6 id="8、引用"><a href="#8、引用" class="headerlink" title="8、引用"></a>8、引用</h6><blockquote><h6 id="ctrl-shift-q"><a href="#ctrl-shift-q" class="headerlink" title="ctrl  +　shift + q"></a>ctrl  +　shift + q</h6></blockquote><p>9、插入链接</p><p><a href=""> ctrl + k</a></p><h6 id="10、代码区域"><a href="#10、代码区域" class="headerlink" title="10、代码区域"></a>10、代码区域</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">​``` + 编程语言    例如：``` + java</span><br></pre></td></tr></table></figure><h6 id="11、表格使用"><a href="#11、表格使用" class="headerlink" title="11、表格使用"></a>11、表格使用</h6><table><thead><tr><th>方法一</th><th>方法二</th></tr></thead><tbody><tr><td>ctrl + T</td><td>|国籍|省份|市区</td></tr></tbody></table><table><thead><tr><th>国籍</th><th>省份</th><th>市区</th></tr></thead><tbody><tr><td></td><td></td><td></td></tr></tbody></table><h6 id="12、任务列表"><a href="#12、任务列表" class="headerlink" title="12、任务列表"></a>12、任务列表</h6><ul><li><input checked="" disabled="" type="checkbox"> -[] (注意空格隔开)</li></ul><h6 id="13、注释"><a href="#13、注释" class="headerlink" title="13、注释"></a>13、注释</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[^注释内容]</span><br></pre></td></tr></table></figure><h6 id="14-、表情"><a href="#14-、表情" class="headerlink" title="14 、表情"></a>14 、表情</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:单词</span><br></pre></td></tr></table></figure><h6 id="15、水平分割线"><a href="#15、水平分割线" class="headerlink" title="15、水平分割线"></a>15、水平分割线</h6><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*** 或 ---</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
          <category> 语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
